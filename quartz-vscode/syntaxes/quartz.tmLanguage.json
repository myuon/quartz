{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "quartz",
  "patterns": [
    { "include": "#comments" },
    {
      "include": "#function_decl"
    },
    {
      "include": "#struct_decl"
    }
  ],
  "repository": {
    "function_decl": {
      "patterns": [
        {
          "match": "(func)(?:\\s*(\\([^\\)]+\\)))?\\s*(\\b\\w+\\b)(?:\\s*(\\([^\\)]*\\))\\s*)(:\\s*[^\\{]*)?",
          "captures": {
            "1": {
              "name": "keyword.function.quartz"
            },
            "2": {
              "patterns": [
                {
                  "begin": "\\(",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.begin.quartz"
                    }
                  },
                  "end": "\\)",
                  "patterns": [
                    {
                      "include": "#type_arguments"
                    }
                  ]
                }
              ]
            },
            "3": {
              "name": "entity.name.function.quartz"
            },
            "4": {
              "patterns": [
                {
                  "begin": "\\(",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.begin.quartz"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.definition.parameters.end.quartz"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#type_arguments"
                    }
                  ]
                }
              ]
            },
            "5": {
              "patterns": [{ "include": "#type_annotation" }]
            }
          }
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": { "name": "punctuation.section.scope.quartz" }
          },
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "punctuation.section.scope.quartz" }
          },
          "patterns": [{ "include": "#statement" }]
        }
      ]
    },
    "struct_decl": {
      "patterns": [
        {
          "match": "(struct)\\s*(\\w+)\\s*",
          "captures": {
            "1": {
              "name": "keyword.control.struct.quartz"
            },
            "2": {
              "name": "entity.name.type.struct.quartz"
            }
          }
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": { "name": "punctuation.section.scope.quartz" }
          },
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "punctuation.section.scope.quartz" }
          },
          "patterns": [
            {
              "match": "(\\w+)\\s*:\\s*(\\w+)(,)",
              "captures": {
                "1": { "name": "entity.name.variable.struct.quartz" },
                "2": { "name": "entity.name.type.struct.quartz" },
                "3": { "name": "punctuation.separator.struct.quartz" }
              }
            }
          ]
        }
      ]
    },
    "type_arguments": {
      "patterns": [
        {
          "include": "#type_annotation"
        },
        {
          "include": "#identifier"
        },
        {
          "match": "(,)",
          "name": "punctuation.separator.type.quartz"
        }
      ]
    },
    "type_annotation": {
      "patterns": [
        {
          "match": ":\\s*",
          "name": "punctuation.separator.type.quartz"
        },
        {
          "include": "#type"
        }
      ]
    },
    "comments": {
      "name": "comment.line.double-slash",
      "match": "//.*"
    },
    "statement": {
      "patterns": [
        {
          "match": "(if|while)\\s*([^\\{]+)\\s",
          "captures": {
            "1": {
              "name": "keyword.control.quartz"
            },
            "2": {
              "patterns": [
                {
                  "include": "#expr"
                }
              ]
            }
          }
        },
        {
          "match": "([^\\;]*);",
          "name": "meta.statement.quartz",
          "captures": {
            "1": { "patterns": [{ "include": "#expr" }] }
          }
        }
      ]
    },
    "expr": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": { "name": "punctuation.section.scope.begin.quartz" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.section.scope.end.quartz" }
          },
          "patterns": [
            {
              "include": "#expr"
            },
            {
              "match": ",",
              "name": "punctuation.separator.parameters.quartz"
            }
          ]
        },
        {
          "match": "\\b(\\.)\\b",
          "captures": {
            "1": { "name": "punctuation.separator.accessor.quartz" }
          }
        },
        {
          "include": "#strings"
        },
        {
          "match": "\\b(\\d+)\\b",
          "name": "constant.numeric.quartz"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "type": {
      "match": "[a-zA-Z_]\\w*",
      "name": "entity.name.type.quartz"
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.quartz",
          "match": "[0-9]+"
        },
        {
          "name": "constant.language.quartz",
          "match": "\\b(nil|true|false)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.quartz",
          "match": "\\b(if|else|return|continue|for|return)\\b"
        },
        {
          "name": "keyword.operator.quartz",
          "match": "\\b(=|;)\\b"
        },
        {
          "name": "keyword.other.quartz",
          "match": "\\b(func|let|struct)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.quartz",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.quartz",
          "match": "\\\\."
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "\\b(self)\\b",
          "name": "keyword.self.quartz"
        },
        {
          "match": "\\b([a-zA-Z_]\\w*)\\b(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.quartz" }
          }
        },
        {
          "match": "\\b([a-zA-Z_]\\w*)\\b",
          "name": "entity.name.variable.quartz"
        }
      ]
    }
  },
  "scopeName": "source.quartz"
}
