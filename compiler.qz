

func find_space_pattern(s: substring): int {
    let n = s.start;
    while (n < s.len()) {
        if _not(s.at(n).eq(" ")) {
            return n;
        };

        n = n + 1;
    };

    return n;
}

func find_exact_pattern(s: substring, pattern: string): int {
    let n = 0;
    while (n < pattern.len()) {
        if (s.at(n) != pattern.at(n - start)) {
            return n;
        };

        n = n + 1;
    };

    return n - start;
}

struct Lexer {
    input: string,
    position: int,
}

func (l: Lexer) run() {
    while (l.position < l.input.len()) {
        _start_debugger;
        let current = l.input.slice_after(l.position);
        _println(current.to_string());

        let n = find_space_pattern(current);
        if (n > 0) {
            l.position = l.position + n;
            continue;
        };

        let n = find_exact_pattern(current, "(");
        if (n > 0) {
            _println("LPAREN");
            l.position = l.position + n;
            continue;
        };

        let n = find_exact_pattern(current, ")");
        if (n > 0) {
            _println("RPAREN");
            l.position = l.position + n;
            continue;
        };

        l.position = l.position + 1;
    };
}

func main() {
    let input = "(module (func $main 0 (return 10)))";
    let lexer = Lexer {
        input: input, 
        position: 0,
    };
    lexer.run();

    _println("== COMPILE FINISHED");
}

func compiler_test() {
    assert_eq(show_int(find_space_pattern("fooo".to_substring())), show_int(0));
    assert_eq(show_int(find_space_pattern("    fooo".to_substring())), show_int(4));
    assert_eq(show_int(find_space_pattern("    ".to_substring())), show_int(4));

    assert_eq(show_int(find_exact_pattern("abcde_fg", 0, "abc")), show_int(3));
    assert_eq(show_int(find_exact_pattern("kabcd", 0, "abc")), show_int(0));
}
