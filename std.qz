struct string {
    data: bytes,
}

func (s: string) len(): int {
    return _len(s.data);
}

func (s: string) eq(t: string): bool {
    return _eq(s,t);
}

func (s: string) bytes(): bytes {
    return s.data;
}

func (s: string) slice(start: int, end: int): string {
    return string {
        data: s.data[start],
    };
}

func (s: string) starts_with(prefix: string): bool {
    return s.slice(0, prefix.len()).eq(prefix);
}

func (s: string) slice_after(start: int): string {
    return s.slice(start, s.len());
}

func (s: string) concat(t: string): string {
    let buffer = _new(s.len() + t.len());
    _copy(s.data, buffer, 0);
    _copy(t.data, buffer, s.len());

    return string { data: buffer };
}

// int cannot have any methods then we need to define as a global function... X(
func int_string(a: int): string {
    let num = a;
    let str = "";

    while num > 0 {
        str = str.concat("0");
        num = _div(num, 10);
    };

    return str;
}

func assert_eq(a, b) {
    if a == b {
        return nil;
    } else {
       //  _println("Assertion failed: ".concat(a).concat(" != ").concat(b));
        _panic;
    };
}

// tests
func main() {
    assert_eq("hello, world".len(), 1000);
    // assert_eq(int_string(1000), "1000");
}
