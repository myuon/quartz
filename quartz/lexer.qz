import quartz::location;

struct Token {
    lexeme: string,
    string_value: string?,
    location: Location,
    raw: string,
}

module Token {
    fun to_string(self): string {
        let value = "nil";
        if self.string_value != nil {
            value = self.string_value!;
        }

        return format("Token({}, {})", self.lexeme, value);
    }
}

struct Lexer {
    position: i32,
    tokens: vec[Token],
}

module Lexer {
    fun new(): Lexer {
        return Lexer {
            position: 0,
            tokens: make[vec[Token]](),
        };
    }

    fun consume_space(self, input: string): i32 {
        let consumed = 0;
        while is_space(input, self.position) {
            self.position = self.position + 1;
            consumed = consumed + 1;
        }

        return consumed;
    }

    fun consume_ident(self, input: string): struct {
        data: string,
        location: Location,
    }? {
        let ident = make[vec[byte]]();
        let position = self.position;
        while is_included(
            input,
            self.position,
            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_",
        ) {
            ident.push(input.data.at(self.position));
            self.position = self.position + 1;
        }

        if ident.length == 0 {
            return nil;
        }

        return struct {
            data: vec_byte_to_string(ident),
            location: Location {
                start: position?,
                end: self.position?,
            },
        }?;
    }

    fun consume_number(self, input: string): struct {
        data: string,
        location: Location,
    }? {
        let number = make[vec[byte]]();
        let position = self.position;
        while is_included(input, self.position, "0123456789") {
            number.push(input.data.at(self.position));
            self.position = self.position + 1;
        }

        if number.length == 0 {
            return nil;
        }

        return struct {
            data: vec_byte_to_string(number),
            location: Location {
                start: position?,
                end: self.position?,
            },
        }?;
    }

    fun consume_string_literal(
        self,
        input: string,
    ): struct {
        value: string,
        location: Location,
        raw: string,
    }? {
        let quote = 34 as byte;
        let backslash = 92 as byte;

        let str = make[vec[byte]]();
        if input.at(self.position) != quote {
            return nil;
        }

        let start_position = self.position;

        self.position = self.position + 1;

        while input.at(self.position) != quote {
            if input.at(self.position) == backslash && input.at(self.position + 1) == quote {
                str.push(quote);
                self.position = self.position + 2;
                continue;
            } else if input.at(self.position) == backslash && input.at(self.position + 1) == 110 as byte {
                str.push(10 as byte);
                self.position = self.position + 2;
                continue;
            } else if input.at(self.position) == backslash && input.at(self.position + 1) == backslash {
                str.push(backslash);
                self.position = self.position + 2;
                continue;
            } else if input.at(self.position) == backslash && input.at(self.position + 1) == 48 as byte {
                str.push(0 as byte);
                self.position = self.position + 2;
                continue;
            }

            str.push(input.at(self.position));
            self.position = self.position + 1;
        }

        self.position = self.position + 1;

        let end_position = self.position;
        let raw = input.slice(start_position, end_position);

        return struct {
            value: vec_byte_to_string(str),
            location: Location {
                start: start_position?,
                end: end_position?,
            },
            raw: raw,
        }?;
    }

    fun consume_raw_string_literal(
        self,
        input: string,
    ): struct {
        value: string,
        location: Location,
        raw: string,
    }? {
        let backquote = 96 as byte;

        let str = make[vec[byte]]();
        let start_position = self.position;

        if input.at(self.position) != backquote {
            return nil;
        }

        self.position = self.position + 1;

        while input.at(self.position) != backquote {
            str.push(input.at(self.position));
            self.position = self.position + 1;
        }

        self.position = self.position + 1;

        let end_position = self.position;
        let raw = input.slice(start_position, end_position);

        return struct {
            value: vec_byte_to_string(str),
            location: Location {
                start: start_position?,
                end: end_position?,
            },
            raw: raw,
        }?;
    }

    fun consume_comment(self, input: string): struct {
        data: string,
        location: Location,
    }? {
        if !is_prefix(input, self.position, "//") {
            return nil;
        }

        let comment = make[vec[byte]]();
        let position = self.position;

        comment.push(47 as byte);
        comment.push(47 as byte);
        self.position = self.position + 2;

        while input.at(self.position) != 10 as byte {
            comment.push(input.at(self.position));
            self.position = self.position + 1;
        }

        return struct {
            data: vec_byte_to_string(comment),
            location: Location {
                start: position?,
                end: self.position?,
            },
        }?;
    }

    fun match(self, input: string, token: string, token_name: string): bool {
        if is_prefix(input, self.position, token) {
            self.tokens.push(Token {
                lexeme: token_name,
                string_value: nil,
                location: Location {
                    start: self.position?,
                    end: (self.position + token.length)?,
                },
                raw: token,
            });
            self.position = self.position + token.length;
            return true;
        }

        return false;
    }

    fun match_term(self, input: string, token: string, token_name: string): bool {
        if is_prefix(input, self.position, token) && is_term_boundary(input, self.position + token.length) {
            self.tokens.push(Token {
                lexeme: token_name,
                string_value: nil,
                location: Location {
                    start: self.position?,
                    end: (self.position + token.length)?,
                },
                raw: token,
            });
            self.position = self.position + token.length;
            return true;
        }

        return false;
    }

    fun run(self, input: string): nil or error {
        while self.position < input.length {
            let p = self.consume_space(input);
            if p > 0 {
                continue;
            }

            let comment = self.consume_comment(input);
            if comment != nil {
                self.tokens.push(Token {
                    lexeme: "comment",
                    string_value: comment!.data?,
                    location: comment!.location,
                    raw: comment!.data,
                });
                continue;
            }

            if self.match_term(input, "fun", "fun") {
                continue;
            }
            if self.match_term(input, "let", "let") {
                continue;
            }
            if self.match_term(input, "return", "return") {
                continue;
            }
            if self.match_term(input, "if", "if") {
                continue;
            }
            if self.match_term(input, "else", "else") {
                continue;
            }
            if self.match_term(input, "while", "while") {
                continue;
            }
            if self.match_term(input, "struct", "struct") {
                continue;
            }
            if self.match_term(input, "as", "as") {
                continue;
            }
            if self.match_term(input, "module", "module") {
                continue;
            }
            if self.match_term(input, "self", "self") {
                continue;
            }
            if self.match_term(input, "for", "for") {
                continue;
            }
            if self.match_term(input, "in", "in") {
                continue;
            }
            if self.match_term(input, "true", "true") {
                continue;
            }
            if self.match_term(input, "false", "false") {
                continue;
            }
            if self.match_term(input, "nil", "nil") {
                continue;
            }
            if self.match_term(input, "or", "or") {
                continue;
            }
            if self.match_term(input, "import", "import") {
                continue;
            }
            if self.match_term(input, "continue", "continue") {
                continue;
            }
            if self.match_term(input, "break", "break") {
                continue;
            }
            if self.match_term(input, "try", "try") {
                continue;
            }
            if self.match_term(input, "enum", "enum") {
                continue;
            }
            if self.match(input, "==", "double_equal") {
                continue;
            }
            if self.match(input, "!=", "not_equal") {
                continue;
            }
            if self.match(input, ">=", "gte") {
                continue;
            }
            if self.match(input, "<=", "lte") {
                continue;
            }
            if self.match(input, "<<", "bit_shift_left") {
                continue;
            }
            if self.match(input, ">>", "bit_shift_right") {
                continue;
            }
            if self.match(input, "::", "double_colon") {
                continue;
            }
            if self.match(input, "..", "double_dot") {
                continue;
            }
            if self.match(input, "&&", "double_amp") {
                continue;
            }
            if self.match(input, "||", "double_pipe") {
                continue;
            }
            if self.match(input, "(", "lparen") {
                continue;
            }
            if self.match(input, ")", "rparen") {
                continue;
            }
            if self.match(input, "{", "lbrace") {
                continue;
            }
            if self.match(input, "}", "rbrace") {
                continue;
            }
            if self.match(input, "[", "lbracket") {
                continue;
            }
            if self.match(input, "]", "rbracket") {
                continue;
            }
            if self.match(input, ":", "colon") {
                continue;
            }
            if self.match(input, ";", "semicolon") {
                continue;
            }
            if self.match(input, "+", "plus") {
                continue;
            }
            if self.match(input, "-", "minus") {
                continue;
            }
            if self.match(input, "*", "star") {
                continue;
            }
            if self.match(input, "/", "slash") {
                continue;
            }
            if self.match(input, "%", "percent") {
                continue;
            }
            if self.match(input, "=", "equal") {
                continue;
            }
            if self.match(input, "<", "lt") {
                continue;
            }
            if self.match(input, ">", "gt") {
                continue;
            }
            if self.match(input, ",", "comma") {
                continue;
            }
            if self.match(input, ".", "dot") {
                continue;
            }
            if self.match(input, "!", "bang") {
                continue;
            }
            if self.match(input, "?", "question") {
                continue;
            }
            if self.match(input, "|", "bit_or") {
                continue;
            }
            if self.match(input, "&", "bit_and") {
                continue;
            }

            let number = self.consume_number(input);
            if number != nil {
                self.tokens.push(Token {
                    lexeme: "number",
                    string_value: number!.data?,
                    location: number!.location,
                    raw: number!.data,
                });

                continue;
            }

            let ident = self.consume_ident(input);
            if ident != nil {
                if ident!.data.equal("_") {
                    self.tokens.push(Token {
                        lexeme: "underscore",
                        string_value: nil,
                        location: ident!.location,
                        raw: "_",
                    });

                    continue;
                }

                self.tokens.push(Token {
                    lexeme: "ident",
                    string_value: ident!.data?,
                    location: ident!.location,
                    raw: ident!.data,
                });

                continue;
            }

            let str = self.consume_string_literal(input);
            if str != nil {
                self.tokens.push(Token {
                    lexeme: "string",
                    string_value: str!.value?,
                    location: str!.location,
                    raw: str!.raw,
                });

                continue;
            }

            let str = self.consume_raw_string_literal(input);
            if str != nil {
                self.tokens.push(Token {
                    lexeme: "raw_string",
                    string_value: str!.value?,
                    location: str!.location,
                    raw: str!.raw,
                });

                continue;
            }

            return _ or error::new(`== Abort ==
position: {}
input: {}`.format(
                self.position.to_string(),
                input.slice_start(self.position),
            ));
        }

        return nil;
    }
}

fun is_term_boundary(input: string, position: i32): bool {
    let ch = input.at(position) as i32;
    if 48 < ch && ch < 57 {
        return false;
    }
    if 65 < ch && ch < 90 {
        return false;
    }
    if 97 < ch && ch < 122 {
        return false;
    }
    if ch == 95 {
        return false;
    }

    return true;
}

