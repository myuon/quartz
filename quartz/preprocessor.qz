import quartz::ast;

struct Preprocessor {
    config: struct {
        version: string,
    },
}

module Preprocessor {
    fun new(): Preprocessor {
        return Preprocessor {
            config: struct {
                version: "",
            },
        };
    }

    fun run(
        self,
        m: Module,
        config: struct {
            version: string,
        },
    ): nil or error {
        self.config = config;

        return self.module_(m).try;
    }

    fun module_(self, m: Module): nil or error {
        let index = 0;

        while index < m.decls.length {
            let d = m.decls.at(index).data;
            if d.t_attribute != nil {
                let attr = d.t_attribute!.data;
                if attr.name.data == "build_if" {
                    let result = self.interpret_bool(attr.args.at(0)).try;
                    if !result {
                        // m.decls.at(index + 1) = LDecl {..} is not workingðŸ¤”
                        m.decls.at(index + 1).data = Decl {
                            t_skip: true,
                        };
                    }
                } else if attr.name.data == "nostd" {
                } else {
                    return _ or error::new("unknown attribute");
                }

                index = index + 1;

                continue;
            } else if d.t_attributes != nil {
                let attrs = d.t_attributes!.data;
                for attr in attrs {
                    if attr.name.data == "build_if" {
                        let result = self.interpret_bool(attr.args.at(0)).try;
                        if !result {
                            // m.decls.at(index + 1) = LDecl {..} is not workingðŸ¤”
                            m.decls.at(index + 1).data = Decl {
                                t_skip: true,
                            };
                        }
                    } else if attr.name.data == "nostd" {
                    } else if attr.name.data == "no_allocation" {
                        let next = m.decls.at(index + 1);

                        if next.data.t_func == nil {
                            return _ or error::new("expected function, but got {}".format(derive::to_string(next.data)));
                        }
                        m.decls.at(index + 1).data.t_func!.no_allocation = true;
                    } else if attr.name.data == "declare_wrap" {
                        let next = m.decls.at(index + 1);

                        if next.data.t_declare_func == nil {
                            return _ or error::new("expected declare function, but got {}".format(derive::to_string(next.data)));
                        }

                        let d_func = next.data.t_declare_func!;

                        let params = make[vec[Type]]();
                        let result_type = nil as Type?;

                        for i in 0..attr.args.length {
                            let arg = attr.args.at(i);
                            if arg.data.t_as == nil {
                                return _ or error::new("expected as");
                            }

                            let name_ident = arg.data.t_as!.expr.data.t_ident;
                            if name_ident == nil {
                                return _ or error::new("expected ident");
                            }
                            if name_ident!.name == "result" {
                                result_type = arg.data.t_as!.target_type?;
                                break;
                            }
                            if name_ident!.name != d_func.params.at(i).name {
                                return _ or error::new(format("expected {} but got {}", name_ident!.name, d_func.params.at(i).name));
                            }

                            let type_ = arg.data.t_as!.target_type;
                            params.push(type_);
                        }

                        if result_type == nil {
                            return _ or error::new("expected result");
                        }

                        m.decls.at(index + 1).data.t_declare_func!.declare_wrap = struct {
                            params: params,
                            result_type: result_type!,
                        }?;
                    } else {
                        return _ or error::new("unknown attribute");
                    }
                }

                index = index + 1;

                continue;
            }

            self.decl(d).try;

            index = index + 1;
        }

        return nil;
    }

    fun decl(self, d: Decl): nil or error {
        if d.t_func != nil {
            self.block(d.t_func!.body).try;
        } else if d.t_module != nil {
            self.module_(d.t_module!.module_).try;
        }

        return nil;
    }

    fun block(self, lb: LBlock): nil or error {
        let b = lb.data;
        let index = 0;

        while index < b.block.length {
            let s = b.block.at(index).data;
            if s.t_attribute != nil {
                let next = b.block.at(index + 1);
                self.process_attribute_for_statement(s.t_attribute!, next).try;

                index = index + 1;
            }

            index = index + 1;
        }

        return nil;
    }

    fun process_attribute_for_statement(self, lattr: LAttribute, ls: LStatement): nil or error {
        let attr = lattr.data;
        if attr.name.data == "compiler" {
            let arg = attr.args.at(0).data;
            if arg.t_ident != nil && arg.t_ident!.name == "version" && ls.data.t_let != nil {
                let value = ls.data.t_let!.expr.data;
                if value.t_string != nil {
                    ls.data.t_let!.expr.data = Expression {
                        t_string: struct {
                            value: self.config.version,
                            raw: self.config.version,
                        },
                    };

                    return nil;
                }

                return _ or error::new("expected string literal");
            }

            return _ or error::new("unknown compiler attribute");
        } else {
            return _ or error::new("unknown attribute");
        }

        return nil;
    }

    fun interpret_bool(self, lexpr: LExpression): bool or error {
        let expr = lexpr.data;
        if expr.t_binop != nil {
            let left = self.interpret_string(expr.t_binop!.left).try;
            let right = self.interpret_string(expr.t_binop!.right).try;

            return left == right;
        }

        return _ or error::new(format("not implemented: {}", derive::to_string(expr)));
    }

    fun interpret_string(self, lexpr: LExpression): string or error {
        let expr = lexpr.data;
        if expr.t_ident != nil {
            if expr.t_ident!.name == "version" {
                return self.config.version;
            }
        } else if expr.t_string != nil {
            return expr.t_string!.value;
        }

        return _ or error::new(format("not implemented: {}", derive::to_string(expr)));
    }
}

