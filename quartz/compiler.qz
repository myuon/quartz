import quartz::lexer;
import quartz::parser;
import quartz::typecheck;
import quartz::ir_code_gen;
import quartz::generator;
import quartz::path;
import quartz::ast;

struct LoadedModule {
    path: Path,
    source: string,
    module_: Module,
}

struct Compiler {
    loaded: vec[LoadedModule],
}

module Compiler {
    fun load_module(self, path: Path): nil or error {
        let input = file_read(format("quartz/{}.qz", path.path.at(path.path.length - 1)));

        let lexer = Lexer::new();
        lexer.run(input).try;

        let parser = Parser::new();
        let module_ = parser.run(lexer.tokens).try;

        self.loaded.push(LoadedModule {
            path: path,
            source: input,
            module_: module_,
        });

        return nil;
    }

    fun compile(self, input: string): string or error {
        self.load_module(Path::ident("main")).try;

        let visited = make[map[string, bool]]();
        let imports = make[vec[Path]]();
        imports.push(Path::ident("std"));

        while imports.length != 0 {
            let path = vec_pop(imports);
        }

        lexer.run(input).try;
        let main_module = parser.run(lexer.tokens).try;

        let result = parser.run(lexer.tokens).try;

        let typechecker = Typechecker::new();
        typechecker.module_(result).try;

        let irgen = IrCodeGenerator::new();
        irgen.globals = typechecker.globals;
        let term = irgen.run(result).try;

        let gen = Generator::new();
        gen.set_globals(typechecker.globals);
        gen.set_strings(irgen.strings.strings);
        let code = gen.run(term);

        return code;
    }
}

