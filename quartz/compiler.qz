import quartz::lexer;
import quartz::parser;
import quartz::typecheck;
import quartz::ir_code_gen;
import quartz::generator;
import quartz::path;
import quartz::ast;
import quartz::ir;
import quartz::value;
import quartz::location;
import quartz::preprocessor;
import quartz::ir_path::let_call;

struct LoadedModule {
    path: Path,
    source: string,
    module_: Module,
}

struct Compiler {
    lib_path_string: string?,
    loaded: vec[LoadedModule],
    version: string,
}

module Compiler {
    fun new(lib_path_string: string?, version: string): Compiler {
        return Compiler {
            lib_path_string: lib_path_string,
            loaded: make[vec[LoadedModule]](),
            version: version,
        };
    }

    fun load_module(self, path: Path, skip_errors: bool, preprocess: bool): vec[Path] or error {
        if self.lib_path_string != nil {
            let path_string = format("{}/{}.qz", self.lib_path_string!, path.join("/"));
            if file_exists(path_string).try {
                let input = file_read(path_string).try;

                return self.register_module(path, input, skip_errors, preprocess).try;
            }
        }

        let input = file_read(format("{}.qz", path.join("/"))).try;

        return self.register_module(path, input, skip_errors, preprocess).try;
    }

    fun matches(self, path: Path): LoadedModule? {
        for loaded in self.loaded {
            if is_prefix_path(path, loaded.path) {
                return loaded?;
            }
        }

        return nil;
    }

    fun register_module(
        self,
        path: Path,
        input: string,
        skip_errors: bool,
        preprocess: bool,
    ): vec[Path] or error {
        let lexer = Lexer::new();
        lexer.run(input).try;

        let parser = Parser::new();
        let module_ = parser.run(lexer.tokens, skip_errors).try;

        if preprocess {
            let preprocessor = Preprocessor::new();
            preprocessor.run(
                module_,
                struct {
                    version: self.version,
                },
            ).try;
        }

        self.loaded.push(LoadedModule {
            path: path,
            source: input,
            module_: module_,
        });

        return parser.imports;
    }

    fun parse(
        self,
        input: string,
        load_path: Path?,
        skip_errors: bool,
        preprocess: bool,
    ): Module or error {
        let main_path = Path::new("main");
        if load_path != nil {
            main_path = load_path!;
        }
        let imports = self.register_module(main_path, input, skip_errors, preprocess).try;

        let visited = make[map[string, bool]]();
        visited.insert(main_path.join("_"), true);
        if !input.starts_with("// @[nostd]") {
            imports.push(Path::new("quartz", "std"));
        }

        while imports.length != 0 {
            let path = vec_pop(imports) as Path;
            if visited.has(path.join("_")) {
                continue;
            }

            imports.extend(self.load_module(path, skip_errors, preprocess).try);
            visited.insert(path.join("_"), true);
        }

        let decls = make[vec[LDecl]]();
        for loaded in self.loaded {
            decls.push(LDecl {
                data: Decl {
                    t_module: struct {
                        path: loaded.path,
                        extends: nil,
                        module_: loaded.module_,
                    },
                },
                location: Location::unknown(),
            });
        }

        let module_ = Module {
            decls: decls,
        };

        return module_;
    }

    fun compile(
        self,
        input: string,
        main_path: Path,
        entrypoint: string,
        skip_errors: bool,
        validate_address: bool,
        test_mode: bool,
        output_path: string,
    ): nil or error {
        let module_ = self.parse(input, nil, skip_errors, true).context("parse").try;

        let typechecker = Typechecker::new();
        let n or err = typechecker.run(module_, main_path).context("typecheck");
        if err != nil {
            let err_internal = err!;

            for detail in err!.detail {
                let detail_type = reflection::get_type_rep(detail);
                if detail_type.name.equal("ErrorSource") {
                    let source = detail as ErrorSource;

                    let input_to_inspect = input;
                    if main_path.join("_") != source.path.join("_") {
                        let loaded = self.matches(source.path);
                        if loaded == nil {
                            return _ or err!;
                        }

                        input_to_inspect = loaded!.source;
                    }

                    let line_counts = input_to_inspect.line_counts();

                    let start_position = find_position_with_line_counts(line_counts, source.location.start!);
                    let end_position = find_position_with_line_counts(line_counts, source.location.end!);

                    err_internal = err_internal.context(struct {
                        path: source.path,
                        start: start_position,
                        end: end_position,
                    });
                }
            }

            return _ or err_internal;
        }

        let irgen = IrCodeGenerator::new(test_mode, "main_{}".format(entrypoint));
        irgen.globals = typechecker.globals;
        irgen.interfaces = typechecker.interfaces;
        let term = irgen.run(module_).context("ircodegen").try;

        term = transform_let_call(term);

        let envs = environs();
        if envs.has("GENERATE_IR") {
            file_write("quartz.ir", term.to_string());

            println("wrote quartz.ir");
        }

        let writer = FileWriter::open(output_path).try;

        let gen = Generator::new(writer, validate_address);
        gen.set_globals(typechecker.globals);
        gen.set_strings(irgen.strings.strings);
        gen.set_type_reps(irgen.type_reps.type_reps);
        gen.set_start_terms(irgen.start);

        term = gen.fold_consts(term);

        let offset = ((irgen.data_section_offset + 7) / 8) * 8;
        gen.run(term, entrypoint, offset);

        writer.close();

        return nil;
    }

    fun check(
        self,
        input: string,
        path: Path,
    ): vec[struct {
        start: struct {
            line: i32,
            column: i32,
        },
        end: struct {
            line: i32,
            column: i32,
        },
        message: string,
    }] {
        let module_ or err = self.parse(input, nil, false, false);
        if err != nil {
            let err_internal = err!;

            for detail in err_internal.detail {
                let detail_type = reflection::get_type_rep(detail);
                if detail_type.name.equal("ErrorSource") {
                    let source = detail as ErrorSource;

                    if source.location.start == nil || source.location.end == nil {
                        panic("NPE");
                    }

                    let start_position = find_position(input, source.location.start!);
                    let end_position = find_position(input, source.location.end!);

                    return make[vec[struct {
                        start: struct {
                            line: i32,
                            column: i32,
                        },
                        end: struct {
                            line: i32,
                            column: i32,
                        },
                        message: string,
                    }]](struct {
                        start: start_position,
                        end: end_position,
                        message: err_internal.message,
                    });
                }
            }

            return make[vec[struct {
                start: struct {
                    line: i32,
                    column: i32,
                },
                end: struct {
                    line: i32,
                    column: i32,
                },
                message: string,
            }]](struct {
                start: struct {
                    line: 0,
                    column: 0,
                },
                end: struct {
                    line: 0,
                    column: 0,
                },
                message: format("parse error: {}", err!.message),
            });
        }

        let typechecker = Typechecker::new();
        let n or err = typechecker.run(module_!, path);
        if err == nil {
            return make[vec[struct {
                start: struct {
                    line: i32,
                    column: i32,
                },
                end: struct {
                    line: i32,
                    column: i32,
                },
                message: string,
            }]]();
        }

        let err_internal = err!;

        for detail in err_internal.detail {
            let detail_type = reflection::get_type_rep(detail);
            if detail_type.name.equal("ErrorSource") {
                let source = detail as ErrorSource;

                if source.location.start == nil || source.location.end == nil {
                    panic("NPE");
                }

                let start_position = find_position(input, source.location.start!);
                let end_position = find_position(input, source.location.end!);

                return make[vec[struct {
                    start: struct {
                        line: i32,
                        column: i32,
                    },
                    end: struct {
                        line: i32,
                        column: i32,
                    },
                    message: string,
                }]](struct {
                    start: start_position,
                    end: end_position,
                    message: err_internal.message,
                });
            }
        }

        return make[vec[struct {
            start: struct {
                line: i32,
                column: i32,
            },
            end: struct {
                line: i32,
                column: i32,
            },
            message: string,
        }]](struct {
            start: struct {
                line: 0,
                column: 0,
            },
            end: struct {
                line: 0,
                column: 0,
            },
            message: format("typecheck error: {}", err_internal.message),
        });
    }

    fun check_type(self, filepath: string, input: string, line: i32, column: i32): string or error {
        let path = Path::new("main");

        let module_ = self.parse(input, nil, true, false).try;

        let position = find_line_column_from_position(input, line, column);

        let typechecker = Typechecker::new();
        let t = typechecker.find_at_cursor(module_, path, position).try;

        return format("```quartz\n{}\n```", t.to_string());
    }

    fun completion(
        self,
        input: string,
        path: Path,
        line: i32,
        column: i32,
        dot: bool,
    ): vec[struct {
        kind: string,
        label: string,
        text: string,
    }] or error {
        let module_ = self.parse(input, nil, true, false).try;
        let position = find_line_column_from_position(input, line, column);

        let typechecker = Typechecker::new();
        let result = typechecker.completion(module_, path, position, dot).try;

        return result;
    }

    fun go_to_def(
        self,
        input: string,
        path: Path,
        line: i32,
        column: i32,
    ): struct {
        module_name: string,
        start: struct {
            line: i32,
            column: i32,
        },
        end: struct {
            line: i32,
            column: i32,
        },
    } or error {
        let module_ = self.parse(input, path?, true, false).try;
        let position = find_line_column_from_position(input, line, column);

        let typechecker = Typechecker::new();
        let result = typechecker.find_definition(module_, path, position).try;

        let loaded = self.matches(path);
        if loaded != nil {
            return struct {
                module_name: loaded!.path.join("/"),
                start: find_position(loaded!.source, result.start),
                end: find_position(loaded!.source, result.end),
            };
        } else {
            return _ or error::new("module not found");
        }
    }
}

fun find_position(
    input: string,
    position: i32,
): struct {
    line: i32,
    column: i32,
} {
    return find_position_with_line_counts(input.line_counts(), position);
}

fun find_position_with_line_counts(
    line_counts: vec[i32],
    position: i32,
): struct {
    line: i32,
    column: i32,
} {
    let line_number = 0;
    let count = 0;
    for line in line_counts {
        if count + line + 1 > position {
            break;
        }

        line_number = line_number + 1;
        count = count + line + 1;
    }

    return struct {
        line: line_number,
        column: position - count,
    };
}

fun find_line_column_from_position(input: string, line: i32, column: i32): i32 {
    let start = 0;
    let end = input.length;
    let line_counts = input.line_counts();

    while start < end {
        let mid = (start + end) / 2;
        let pos = find_position_by_line_counts(line_counts, mid);

        if pos.line == line && pos.column == column {
            return mid;
        }

        if pos.line < line || (pos.line == line && pos.column < column) {
            start = mid + 1;
        } else {
            end = mid;
        }
    }

    return start;
}

fun find_position_by_line_counts(
    line_counts: vec[i32],
    position: i32,
): struct {
    line: i32,
    column: i32,
} {
    let line_number = 0;
    let count = 0;
    for line in line_counts {
        if count + line > position {
            break;
        }

        line_number = line_number + 1;
        count = count + line + 1;
    }

    return struct {
        line: line_number,
        column: position - count,
    };
}

