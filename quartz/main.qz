fun string_equal(s1: string, s2: string): bool {
  if s1.length != s2.length {
    return false;
  }

  for i in 0..s1.length {
    if s1.data.at(i) != s2.data.at(i) {
      return false;
    }
  }

  return true;
}

fun is_space(s: string, n: i32): bool {
  return s.data.at(n) == 32 as byte;
}

type Token = {
  lexeme: string,
  position: i32,
};

type Lexer = {
  position: i32,
  tokens: vec[Token],
};

module Lexer {
  fun new(): Lexer {
    return Lexer {
      position: 0,
      tokens: make[vec[Token]](),
    };
  }

  fun run(self, input: string) {
    while input.length > self.position {
      println("ERROR");
      return nil;
    }
  }
}

fun test() {
  if !string_equal("hello", "hello") {
    println("string_equal failed");
  }
}

fun main() {
  test();

  let lexer = Lexer::new();
  lexer.run("x + 1");
}
