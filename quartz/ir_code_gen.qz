import quartz::ast;
import quartz::ir;

type IrCodeGenerator = {
    globals: map[string, Type],
    locals: vec[string],
};

module IrCodeGenerator {
    fun new(): IrCodeGenerator {
        return IrCodeGenerator {
            globals: make[map[string, Type]](),
            locals: make[vec[string]](),
        };
    }

    fun module_(self, m: Module): IrTerm {
        let elements = make[vec[IrTerm]]();

        for i in 0..m.decls.length {
            let d = m.decls.at(i);

            if d.t_func != nil {
                elements.push(IrTerm {
                    t_func: self.function(d.t_func!)?,
                    ..nil,
                });
            }
            if d.t_let != nil {
                elements.push(IrTerm {
                    t_global_let: struct {
                        name: d.t_let!.name,
                        type_: IrType {
                            t_i32: true?,
                            ..nil,
                        },
                        value: self.expression(d.t_let!.expr),
                    }?,
                    ..nil,
                });
            }
            if d.t_type != nil {}
        }

        return IrTerm {
            t_module: struct {
                elements: elements,
            }?,
            ..nil
        };
    }

    fun function(self, func: Function): IrFunc {
        self.locals = make[vec[string]]();
        let body = self.block(func.body);

        let params = make[vec[struct {
            name: string,
            type_: IrType,
        }]]();
        for i in 0..func.params.length {
            let p = func.params.at(i);

            params.push(struct {
                name: p.name,
                type_: IrType::new(p.type_),
            });
        }

        return IrFunc {
            name: func.name,
            params: params,
            body: body,
            result_type: IrType::new(func.result_type),
            locals: self.locals,
        };
    }
    
    fun block(self, b: Block): vec[IrTerm] {
        let elements = make[vec[IrTerm]]();

        for i in 0..b.block.length {
            elements.push(self.statement(b.block.at(i)));
        }

        return elements;
    }

    fun statement(self, stm: Statement): IrTerm {
        if stm.t_let != nil {
            let term = IrTerm {
                t_let: IrLet {
                    name: stm.t_let!.name,
                    type_: IrType {
                        t_i32: true?,
                        ..nil,
                    },
                    value: self.expression(stm.t_let!.expr),
                }?,
                ..nil,
            };
            self.locals.push(stm.t_let!.name);

            return term;
        }
        if stm.t_return != nil {
            let term = IrTerm {
                t_return: IrReturn {
                    value: self.expression(stm.t_return!.expr),
                }?,
                ..nil,
            };

            return term;
        }
        if stm.t_expr != nil {
            return self.expression(stm.t_expr!.expr);
        }
        if stm.t_assign != nil {
            let lhs = self.expression(stm.t_assign!.lhs);
            let rhs = self.expression(stm.t_assign!.rhs);

            if lhs.t_ident != nil {
                let term = IrTerm {
                    t_assign: struct {
                        lhs: lhs.t_ident!,
                        rhs: rhs,
                    }?,
                    ..nil,
                };

                return term;
            }

            panic("lhs: {}", stm.t_assign!.lhs.to_string());
        }
        if stm.t_if != nil {
            let then_elements = make[vec[IrTerm]]();
            for i in 0..stm.t_if!.then_block.block.length {
                then_elements.push(self.statement(stm.t_if!.then_block.block.at(i)));
            }

            let else_elements = make[vec[IrTerm]]();
            if stm.t_if!.else_block != nil {
                for i in 0..stm.t_if!.else_block!.block.length {
                    else_elements.push(self.statement(stm.t_if!.else_block!.block.at(i)));
                }
            }

            return IrTerm {
                t_if: struct {
                    condition: self.expression(stm.t_if!.condition),
                    then_term: IrTerm {
                        t_seq: struct {
                            terms: then_elements,
                        }?,
                        ..nil,
                    },
                    else_term: IrTerm {
                        t_seq: struct {
                            terms: else_elements,
                        }?,
                        ..nil,
                    },
                }?,
                ..nil,
            };
        }
        if stm.t_while != nil {
            let body_elements = make[vec[IrTerm]]();
            for i in 0..stm.t_while!.block.block.length {
                body_elements.push(self.statement(stm.t_while!.block.block.at(i)));
            }

            return IrTerm {
                t_while: struct {
                    condition: self.expression(stm.t_while!.condition),
                    block: IrTerm {
                        t_seq: struct {
                            terms: body_elements,
                        }?,
                        ..nil,
                    },
                    cleanup: nil as IrTerm?,
                }?,
                ..nil,
            };
        }

        return panic("statement exhausted: {}", stm.to_string());
    }

    fun expression(self, expr: Expression): IrTerm {
        if expr.t_number != nil {
            let term = IrTerm {
                t_i32: expr.t_number!.value?,
                ..nil,
            };

            return term;
        }
        if expr.t_binop != nil {
            let args = make[vec[IrTerm]]();
            args.push(self.expression(expr.t_binop!.left));
            args.push(self.expression(expr.t_binop!.right));

            if expr.t_binop!.binop.equal("plus") {
                return IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "add"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                };
            }
            if expr.t_binop!.binop.equal("minus") {
                return IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "sub"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                };
            }
            if expr.t_binop!.binop.equal("mult") {
                return IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "mult"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                };
            }
            if expr.t_binop!.binop.equal("equal") {
                return IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "equal"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                };
            }
            if expr.t_binop!.binop.equal("lt") {
                return IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "lt"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                };
            }

            panic("binop exhausted: ".concat(expr.t_binop!.binop));
        }
        if expr.t_ident != nil {
            let term = IrTerm {
                t_ident: expr.t_ident!.name?,
                ..nil,
            };

            return term;
        }
        if expr.t_call != nil {
            let term = IrTerm {
                t_call: IrCall {
                    callee: self.expression(expr.t_call!.callee),
                    args: make[vec[IrTerm]](),
                }?,
                ..nil,
            };

            for i in 0..expr.t_call!.args.length {
                term.t_call!.args.push(self.expression(expr.t_call!.args.at(i)));
            }

            return term;
        }
        if expr.t_record != nil {
            let t = self.globals.at(expr.t_record!.name).t_struct!;

            let record = make[vec[struct {
                type_: IrType,
                term: IrTerm,
            }]]();
            for i in 0..t.fields.length {
                let field = t.fields.at(i);
                let value = expr.t_record!.fields.at(i).value;

                record.push(struct {
                    type_: IrType::new(field.type_),
                    term: self.expression(value),
                });
            }

            return self.generate_array_enumerated(record);
        }
        if expr.t_project != nil {
            let t = expr.t_project!.type_!.t_struct!;
            let index = t.index(expr.t_project!.field);

            let offset = 0;
            for i in 0..index {
                offset = offset + IrType::new(t.fields.at(i).type_).sizeof();
            }

            return IrTerm {
                t_load: struct {
                    type_: IrType::new(t.fields.at(index).type_),
                    address: self.expression(expr.t_project!.expr),
                    offset: IrTerm::i32(offset),
                }?,
                ..nil,
            };
        }

        return panic("expression exhausted: {}", expr.to_string());
    }

    fun generate_array_enumerated(self, record: vec[struct {
        type_: IrType,
        term: IrTerm,
    }]): IrTerm {
        let terms = make[vec[struct {
            offset: i32,
            type_: IrType,
            term: IrTerm,
        }]]();
        let offset = 0;
        for i in 0..record.length {
            let field = record.at(i);

            terms.push(struct {
                offset: offset,
                type_: field.type_,
                term: field.term,
            });
            offset = offset + field.type_.sizeof();
        }

        return self.generate_array(terms);
    }

    fun generate_array(self, terms: vec[struct {
        offset: i32,
        type_: IrType,
        term: IrTerm,
    }]): IrTerm {
        self.locals.push("arr");

        let args = make[vec[IrTerm]]();
        args.push(IrTerm {
            t_i32: (terms.length * 4).to_string()?,
            ..nil,
        });

        let arr = make[vec[IrTerm]]();
        arr.push(IrTerm {
            t_let: IrLet {
                name: "arr",
                type_: IrType {
                    t_address: true?,
                    ..nil,
                },
                value: IrTerm {
                    t_call: IrCall {
                        callee: IrTerm {
                            t_ident: "alloc"?,
                            ..nil,
                        },
                        args: args,
                    }?,
                    ..nil,
                },
            }?,
            ..nil,
        });

        for i in 0..terms.length {
            let term = terms.at(i);
            let element = IrTerm {
                t_store: struct {
                    type_: term.type_,
                    address: IrTerm::ident("arr"),
                    offset: IrTerm::i32(term.offset),
                    value: term.term,
                }?,
                ..nil,
            };

            arr.push(element);
        }

        arr.push(IrTerm {
            t_ident: "arr"?,
            ..nil,
        });

        return IrTerm {
            t_seq: struct {
                terms: arr,
            }?,
            ..nil,
        };
    }
}
