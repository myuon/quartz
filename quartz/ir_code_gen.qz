import quartz::ast;
import quartz::ir;

type IrCodeGenerator = {
};

module IrCodeGenerator {
    fun new(): IrCodeGenerator {
        return IrCodeGenerator {
        };
    }

    fun function(self, func: Function): IrTerm {
        let body = self.block(func.body);

        return IrTerm {
            ir_func: IrFunc {
                name: func.name,
                params: make[vec[ParamPair]](),
                body: body,
            }?,
            ..nil,
        };
    }
    
    fun block(self, b: Block): vec[IrTerm] {
        let elements = make[vec[IrTerm]]();

        for i in 0..b.block.length {
            elements.push(self.statement(b.block.at(i)));
        }

        return elements;
    }

    fun statement(self, stm: Statement): IrTerm {
        if stm.t.equal("let") {
            let term = IrTerm {
                ir_let: IrLet {
                    name: stm.name!,
                    type_: IrType {
                        ir_i32: true?,
                    },
                    value: self.expression(stm.expr),
                }?,
                ..nil,
            };

            return term;
        }
        if stm.t.equal("return") {
            let term = IrTerm {
                ir_return: IrReturn {
                    value: self.expression(stm.expr),
                }?,
                ..nil,
            };

            return term;
        }

        panic("statement exhausted: ".concat(stm.t));
    }

    fun expression(self, expr: Expression): IrTerm {
        if expr.t.equal("number") {
            let term = IrTerm {
                ir_i32: expr.value,
                ..nil,
            };

            return term;
        }
        if expr.t.equal("plus") {
            let term = IrTerm {
                ir_call: IrCall {
                    callee: IrTerm {
                        ir_ident: "plus"?,
                        ..nil,
                    },
                    args: make[vec[IrTerm]](),
                }?,
                ..nil,
            };

            term.ir_call!.args.push(self.expression(expr.left!));
            term.ir_call!.args.push(self.expression(expr.right!));

            return term;
        }
        if expr.t.equal("ident") {
            let term = IrTerm {
                ir_ident: expr.value,
                ..nil,
            };

            return term;
        }

        panic("expression exhausted: ".concat(expr.t));
    }
}
