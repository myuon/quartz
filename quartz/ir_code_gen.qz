import quartz::ast;
import quartz::ir;

type IrCodeGenerator = {
    locals: vec[string],
};

module IrCodeGenerator {
    fun new(): IrCodeGenerator {
        return IrCodeGenerator {
            locals: make[vec[string]](),
        };
    }

    fun module_(self, m: Module): IrTerm {
        let elements = make[vec[IrTerm]]();

        for i in 0..m.decls.length {
            let f = m.decls.at(i);

            if f.t_func != nil {
                elements.push(IrTerm {
                    ir_func: self.function(f.t_func!)?,
                    ..nil,
                });
                continue;
            }

            panic("module_ exhausted");
        }

        return IrTerm {
            ir_module: struct {
                elements: elements,
            }?,
            ..nil
        };
    }

    fun function(self, func: Function): IrFunc {
        self.locals = make[vec[string]]();
        let body = self.block(func.body);

        let params = make[vec[struct {
            name: string,
            type_: IrType,
        }]]();
        for i in 0..func.params.length {
            let p = func.params.at(i);

            params.push(struct {
                name: p.name,
                type_: IrType::new(p.type_),
            });
        }

        return IrFunc {
            name: func.name,
            params: params,
            body: body,
            result_type: IrType::new(func.result_type),
            locals: self.locals,
        };
    }
    
    fun block(self, b: Block): vec[IrTerm] {
        let elements = make[vec[IrTerm]]();

        for i in 0..b.block.length {
            elements.push(self.statement(b.block.at(i)));
        }

        return elements;
    }

    fun statement(self, stm: Statement): IrTerm {
        if stm.t_let != nil {
            let term = IrTerm {
                ir_let: IrLet {
                    name: stm.t_let!.name,
                    type_: IrType {
                        ir_i32: true?,
                    },
                    value: self.expression(stm.t_let!.expr),
                }?,
                ..nil,
            };
            self.locals.push(stm.t_let!.name);

            return term;
        }
        if stm.t_return != nil {
            let term = IrTerm {
                ir_return: IrReturn {
                    value: self.expression(stm.t_return!.expr),
                }?,
                ..nil,
            };

            return term;
        }

        panic("statement exhausted");
    }

    fun expression(self, expr: Expression): IrTerm {
        if expr.t_number != nil {
            let term = IrTerm {
                ir_i32: expr.t_number!.value?,
                ..nil,
            };

            return term;
        }
        if expr.t_binop != nil {
            if expr.t_binop!.binop.equal("plus") {
                let term = IrTerm {
                    ir_call: IrCall {
                        callee: IrTerm {
                            ir_ident: "add"?,
                            ..nil,
                        },
                        args: make[vec[IrTerm]](),
                    }?,
                    ..nil,
                };

                term.ir_call!.args.push(self.expression(expr.t_binop!.left));
                term.ir_call!.args.push(self.expression(expr.t_binop!.right));

                return term;
            }

            panic("binop exhausted: ".concat(expr.t_binop!.binop));
        }
        if expr.t_ident != nil {
            let term = IrTerm {
                ir_ident: expr.t_ident!.name?,
                ..nil,
            };

            return term;
        }
        if expr.t_call != nil {
            let term = IrTerm {
                ir_call: IrCall {
                    callee: self.expression(expr.t_call!.callee),
                    args: make[vec[IrTerm]](),
                }?,
                ..nil,
            };

            for i in 0..expr.t_call!.args.length {
                term.ir_call!.args.push(self.expression(expr.t_call!.args.at(i)));
            }

            return term;
        }

        panic("expression exhausted: ");
    }
}
