import quartz::path;
import quartz::lexer;
import quartz::ast;

struct Parser {
    position: i32,
    input: vec[Token],
    omit_index: i32,
    imports: vec[Path],
}

module Parser {
    fun new(): Parser {
        return Parser {
            position: 0,
            input: make[vec[Token]](),
            omit_index: 0,
            imports: make[vec[Path]](),
        };
    }

    fun run(self, input: vec[Token]): Module or error {
        self.input = input;
        return self.module_();
    }

    fun module_(self): Module or error {
        let decls = make[vec[Decl]]();

        while !self.is_end() && !self.peek().lexeme.equal("rbrace") {
            decls.push(self.decl().try);
        }

        return Module {
            decls: decls,
        };
    }

    fun decl(self): Decl or error {
        let token = self.peek();
        if token.lexeme.equal("fun") {
            let func = self.function().try;

            return Decl {
                t_func: func,
            };
        }
        if token.lexeme.equal("let") {
            let let_ = self.global_let().try;

            return Decl {
                t_let: let_,
            };
        }
        if token.lexeme.equal("struct") {
            let struct_ = self.struct_decl().try;

            return Decl {
                t_type: struct_,
            };
        }
        if token.lexeme.equal("enum") {
            let enum_ = self.enum_decl().try;

            return Decl {
                t_enum: enum_,
            };
        }
        if token.lexeme.equal("module") {
            let module_ = self.module_decl().try;

            return Decl {
                t_module: module_,
            };
        }
        if token.lexeme.equal("import") {
            self.expect("import").try;
            let path = self.path().try;
            self.expect("semicolon").try;

            self.imports.push(path);

            return Decl {
                t_import: path,
            };
        }

        return _ or error::new("Expected DECL, got ".concat(token.lexeme).concat("{").concat(
            token.string_value!,
        ).concat("}"));
    }

    fun path(self): Path or error {
        let path = make[vec[string]](self.ident().try);
        while true {
            if self.peek().lexeme.equal("double_colon") {
                self.expect("double_colon").try;
                path.push(self.ident().try);
            } else {
                break;
            }
        }

        return Path {
            path: path,
        };
    }

    fun struct_decl(
        self,
    ): struct {
        name: string,
        type_: Type,
    } or error {
        self.expect("struct").try;
        let ident = self.ident().try;
        self.expect("lbrace").try;

        let fields = make[vec[struct {
            name: string,
            type_: Type,
        }]]();

        while !self.peek().lexeme.equal("rbrace") {
            let name = self.ident().try;
            self.expect("colon").try;
            let t = self.type_().try;

            fields.push(struct {
                name: name,
                type_: t,
            });

            if self.peek().lexeme.equal("comma") {
                self.consume();
            } else {
                break;
            }
        }

        self.expect("rbrace").try;

        return struct {
            name: ident,
            type_: Type {
                t_struct: TypeStruct {
                    fields: fields,
                },
            },
        };
    }

    fun enum_decl(
        self,
    ): struct {
        name: string,
        type_: Type,
    } or error {
        self.expect("enum").try;
        let ident = self.ident().try;
        self.expect("lbrace").try;

        let fields = make[vec[struct {
            name: string,
            type_: Type,
        }]]();

        while !self.peek().lexeme.equal("rbrace") {
            let name = self.ident().try;
            self.expect("colon").try;
            let t = self.type_().try;

            fields.push(struct {
                name: name,
                type_: t,
            });

            if self.peek().lexeme.equal("comma") {
                self.consume();
            } else {
                break;
            }
        }

        self.expect("rbrace").try;

        return struct {
            name: ident,
            type_: Type {
                t_enum: TypeStruct {
                    fields: fields,
                },
            },
        };
    }

    fun module_decl(
        self,
    ): struct {
        path: Path,
        module_: Module,
    } or error {
        self.expect("module").try;
        let name = self.ident().try;
        self.expect("lbrace").try;
        let module_ = self.module_().try;
        self.expect("rbrace").try;

        return struct {
            path: Path::ident(name),
            module_: module_,
        };
    }

    fun global_let(self): Let or error {
        self.expect("let").try;
        let name = self.ident().try;

        let t = Type {
            t_omit: true,
        };
        if self.peek().lexeme.equal("colon") {
            self.expect("colon").try;
            t = self.type_().try;
        }

        self.expect("equal").try;
        let value = self.expression().try;
        self.expect("semicolon").try;

        return Let {
            name: name,
            name_type: t,
            expr: value,
        };
    }

    fun function(self): Function or error {
        self.expect("fun").try;
        let name = self.ident().try;
        self.expect("lparen").try;
        let params = self.parameters().try;
        self.expect("rparen").try;

        let result_type = Type {
            t_nil: true,
        };
        if self.peek().lexeme.equal("colon") {
            self.consume();
            result_type = self.type_().try;
        }

        self.expect("lbrace").try;
        let body = self.block().try;
        self.expect("rbrace").try;

        return Function {
            name: name,
            result_type: result_type,
            body: body,
            params: params.params,
            variadic: params.variadic,
        };
    }

    fun parameters(
        self,
    ): struct {
        params: vec[struct {
            name: string,
            type_: Type,
        }],
        variadic: struct {
            name: string,
            type_: Type,
        }?,
    } or error {
        let params = make[vec[struct {
            name: string,
            type_: Type,
        }]]();
        let variadic = nil as struct {
            name: string,
            type_: Type,
        }?;

        while !self.is_end() && !self.peek().lexeme.equal("rparen") {
            if self.peek().lexeme.equal("self") {
                self.expect("self").try;
                params.push(struct {
                    name: "self",
                    type_: Type {
                        t_omit: true,
                    },
                });
            } else if self.peek().lexeme.equal("double_dot") {
                self.expect("double_dot").try;
                let name = self.ident().try;
                self.expect("colon").try;
                let t = self.type_().try;

                variadic = struct {
                    name: name,
                    type_: t,
                }?;
            } else {
                let name = self.ident().try;
                self.expect("colon").try;
                let t = self.type_().try;

                params.push(struct {
                    name: name,
                    type_: t,
                });
            }

            if self.peek().lexeme.equal("comma") {
                self.consume();
            }
        }

        return struct {
            params: params,
            variadic: variadic,
        };
    }

    fun type_(self): Type or error {
        let current = self.type_primitive().try;
        if self.peek().lexeme.equal("question") {
            self.expect("question").try;

            return Type {
                t_optional: current,
            };
        }
        if self.peek().lexeme.equal("or") {
            self.expect("or").try;
            let t = self.type_().try;

            return Type {
                t_or: struct {
                    left: current,
                    right: t,
                },
            };
        }

        return current;
    }

    fun type_primitive(self): Type or error {
        let token = self.consume();
        if token.lexeme.equal("ident") {
            if token.string_value!.equal("i32") {
                return Type {
                    t_i32: true,
                };
            } else if token.string_value!.equal("u32") {
                return Type {
                    t_u32: true,
                };
            } else if token.string_value!.equal("byte") {
                return Type {
                    t_byte: true,
                };
            } else if token.string_value!.equal("bool") {
                return Type {
                    t_bool: true,
                };
            } else if token.string_value!.equal("ptr") {
                self.expect("lbracket").try;
                let t = self.type_().try;
                self.expect("rbracket").try;

                return Type {
                    t_ptr: t,
                };
            } else if token.string_value!.equal("vec") {
                self.expect("lbracket").try;
                let t = self.type_().try;
                self.expect("rbracket").try;

                return Type {
                    t_vec: t,
                };
            } else if token.string_value!.equal("any") {
                return Type {
                    t_any: true,
                };
            } else if token.string_value!.equal("map") {
                self.expect("lbracket").try;
                let key = self.type_().try;
                self.expect("comma").try;
                let value = self.type_().try;
                self.expect("rbracket").try;

                return Type {
                    t_map: struct {
                        key: key,
                        value: value,
                    },
                };
            }

            return Type {
                t_ident: token.string_value!,
            };
        } else if token.lexeme.equal("struct") {
            self.expect("lbrace").try;

            let fields = make[vec[struct {
                name: string,
                type_: Type,
            }]]();

            while !self.peek().lexeme.equal("rbrace") {
                let name = self.ident().try;
                self.expect("colon").try;
                let t = self.type_().try;

                fields.push(struct {
                    name: name,
                    type_: t,
                });

                if self.peek().lexeme.equal("comma") {
                    self.consume();
                } else {
                    break;
                }
            }

            self.expect("rbrace").try;

            return Type {
                t_struct: TypeStruct {
                    fields: fields,
                },
            };
        } else if token.lexeme.equal("nil") {
            return Type {
                t_nil: true,
            };
        } else {
            return _ or error::new(format("Expected type, got {}", token.to_string()));
        }
    }

    fun peek(self): Token {
        return self.input.at(self.position);
    }

    fun is_end(self): bool {
        return self.position >= self.input.length;
    }

    fun consume(self): Token {
        let token = self.peek();
        self.position = self.position + 1;

        return token;
    }

    fun ident(self): string or error {
        let token = self.consume();
        if token.lexeme.equal("ident") {
            return token.string_value!;
        } else {
            return _ or error::new(format("Expected IDENT, got {}", derive::to_string(token)));
        }
    }

    fun expect(self, lexeme: string): nil or error {
        let token = self.consume();
        if token.lexeme.equal(lexeme) {
            return nil;
        } else {
            return _ or error::new(format("Expected {}, got {}", lexeme, derive::to_string(token)));
        }
    }

    fun expect_ident(self, expected: string): nil or error {
        let i = self.ident().try;
        if !i.equal(expected) {
            return _ or error::new("Expected ".concat(expected).concat(", got ").concat(i));
        }

        return nil;
    }

    fun block(self): Block or error {
        let statements = make[vec[Statement]]();

        while !self.is_end() && !self.peek().lexeme.equal("rbrace") {
            let s = self.statement().try;
            statements.push(s);
        }

        return Block {
            block: statements,
        };
    }

    fun statement(self): Statement or error {
        let token = self.peek();
        if token.lexeme.equal("let") {
            return self.let_statement();
        }
        if token.lexeme.equal("return") {
            return self.return_statement();
        }
        if token.lexeme.equal("if") {
            self.consume();
            let condition = self.expression_conditional().try;
            self.expect("lbrace").try;
            let then_block = self.block().try;
            self.expect("rbrace").try;

            let else_block = nil as Block?;
            if self.peek().lexeme.equal("else") {
                self.consume();

                if self.peek().lexeme.equal("if") {
                    let s = self.statement().try;
                    else_block = Block {
                        block: make[vec[Statement]](s),
                    }?;
                } else {
                    self.expect("lbrace").try;
                    else_block = self.block().try?;
                    self.expect("rbrace").try;
                }
            }

            return Statement {
                t_if: struct {
                    condition: condition,
                    then_block: then_block,
                    else_block: else_block,
                },
            };
        }
        if token.lexeme.equal("while") {
            self.consume();
            let condition = self.expression_conditional().try;
            self.expect("lbrace").try;
            let block = self.block().try;
            self.expect("rbrace").try;

            return Statement {
                t_while: struct {
                    condition: condition,
                    block: block,
                },
            };
        }
        if token.lexeme.equal("for") {
            self.expect("for").try;
            let ident = self.ident().try;
            self.expect("in").try;
            let range = self.expression_conditional().try;

            self.expect("lbrace").try;
            let body = self.block().try;
            self.expect("rbrace").try;

            return Statement {
                t_for: struct {
                    mode: "",
                    type_: nil,
                    ident: ident,
                    range: range,
                    block: body,
                },
            };
        }
        if self.peek().lexeme.equal("continue") {
            self.expect("continue").try;
            self.expect("semicolon").try;

            return Statement {
                t_continue: true,
            };
        }
        if self.peek().lexeme.equal("break") {
            self.expect("break").try;
            self.expect("semicolon").try;

            return Statement {
                t_break: true,
            };
        }

        let expr = self.expression().try;
        if self.peek().lexeme.equal("semicolon") {
            self.consume();

            return Statement {
                t_expr: struct {
                    expr: expr,
                },
            };
        }
        if self.peek().lexeme.equal("equal") {
            self.consume();
            let rhs = self.expression().try;
            self.expect("semicolon").try;

            return Statement {
                t_assign: struct {
                    lhs: expr,
                    rhs: rhs,
                },
            };
        }

        return _ or error::new(format("Unexpected token {} (statement)", self.peek().to_string()));
    }

    fun expression_conditional(self): Expression or error {
        return self.expression_(false).try;
    }

    fun let_statement(self): Statement or error {
        self.expect("let").try;
        let pattern = self.pattern().try;

        let t = Type {
            t_omit: true,
        };
        if self.peek().lexeme.equal("colon") {
            self.expect("colon").try;
            t = self.type_().try;
        }

        self.expect("equal").try;
        let value = self.expression().try;
        self.expect("semicolon").try;

        return Statement {
            t_let: struct {
                pattern: pattern,
                name_type: t,
                expr: value,
            },
        };
    }

    fun pattern(self): Pattern or error {
        let current = Pattern {
            t_omit: true?,
            ..nil,
        };

        if self.peek().lexeme.equal("underscore") {
            self.consume();

            current = Pattern {
                t_omit: true?,
                ..nil,
            };
        } else {
            let name = self.ident().try;

            current = Pattern {
                t_ident: name?,
                ..nil,
            };
        }

        if self.peek().lexeme.equal("or") {
            self.consume();
            let rhs = self.pattern().try;

            return Pattern {
                t_or: struct {
                    lhs: current,
                    rhs: rhs,
                }?,
                ..nil,
            };
        } else {
            return current;
        }
    }

    fun return_statement(self): Statement or error {
        self.expect("return").try;

        if self.peek().lexeme.equal("semicolon") {
            self.expect("semicolon").try;
            return Statement {
                t_return: struct {
                    expr: Expression {
                        t_nil: true,
                    },
                },
            };
        }

        let value = self.expression().try;
        self.expect("semicolon").try;

        return Statement {
            t_return: struct {
                expr: value,
            },
        };
    }

    fun expression(self): Expression or error {
        return self.expression_(true).try;
    }

    fun expression_(self, with_struct: bool): Expression or error {
        return self.term_5(with_struct).try;
    }

    fun term_5(self, with_struct: bool): Expression or error {
        let current = self.term_4(with_struct).try;
        while true {
            if self.peek().lexeme.equal("double_amp") {
                self.expect("double_amp").try;
                let rhs = self.term_4(with_struct).try;

                current = Expression {
                    t_binop: struct {
                        binop: "and",
                        type_: nil,
                        left: current,
                        right: rhs,
                    },
                };
            } else if self.peek().lexeme.equal("double_pipe") {
                self.expect("double_pipe").try;
                let rhs = self.term_4(with_struct).try;

                current = Expression {
                    t_binop: struct {
                        binop: "or",
                        type_: nil,
                        left: current,
                        right: rhs,
                    },
                };
            } else if self.peek().lexeme.equal("or") {
                self.expect("or").try;
                let lhs = current?;
                if lhs!.t_omit != nil {
                    lhs = nil;
                }

                let rhs = self.term_4(with_struct).try?;
                if rhs!.t_omit != nil {
                    rhs = nil;
                }

                current = Expression {
                    t_enumor: struct {
                        lhs: lhs,
                        rhs: rhs,
                        lhs_type: Type {
                            t_omit: true,
                        },
                        rhs_type: Type {
                            t_omit: true,
                        },
                    },
                };
            } else {
                return current;
            }
        }

        return current;
    }

    fun term_4(self, with_struct: bool): Expression or error {
        let current = self.term_3(with_struct).try;

        while true {
            if self.peek().lexeme.equal("double_equal") {
                self.expect("double_equal").try;

                current = Expression {
                    t_binop: struct {
                        binop: "equal",
                        type_: nil,
                        left: current,
                        right: self.term_3(with_struct).try,
                    },
                };
                continue;
            } else if self.peek().lexeme.equal("not_equal") {
                self.expect("not_equal").try;

                current = Expression {
                    t_binop: struct {
                        binop: "not_equal",
                        type_: nil,
                        left: current,
                        right: self.term_3(with_struct).try,
                    },
                };
                continue;
            }

            return current;
        }
    }

    fun term_3(self, with_struct: bool): Expression or error {
        let current = self.term_2(with_struct).try;

        if self.peek().lexeme.equal("lt") {
            self.expect("lt").try;

            return Expression {
                t_binop: struct {
                    binop: "lt",
                    type_: nil,
                    left: current,
                    right: self.term_2(with_struct).try,
                },
            };
        } else if self.peek().lexeme.equal("gt") {
            self.expect("gt").try;

            return Expression {
                t_binop: struct {
                    binop: "gt",
                    type_: nil,
                    left: current,
                    right: self.term_2(with_struct).try,
                },
            };
        } else if self.peek().lexeme.equal("gte") {
            self.expect("gte").try;

            return Expression {
                t_binop: struct {
                    binop: "gte",
                    type_: nil,
                    left: current,
                    right: self.term_2(with_struct).try,
                },
            };
        } else if self.peek().lexeme.equal("lte") {
            self.expect("lte").try;

            return Expression {
                t_binop: struct {
                    binop: "lte",
                    type_: nil,
                    left: current,
                    right: self.term_2(with_struct).try,
                },
            };
        } else if self.peek().lexeme.equal("double_dot") {
            self.expect("double_dot").try;
            let expr = self.term_3(with_struct).try;

            return Expression {
                t_range: struct {
                    start: current,
                    end: expr,
                },
            };
        }

        return current;
    }

    fun term_2(self, with_struct: bool): Expression or error {
        let current = self.term_1(with_struct).try;

        while true {
            if self.peek().lexeme.equal("plus") {
                self.expect("plus").try;

                current = Expression {
                    t_binop: struct {
                        binop: "plus",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            }
            if self.peek().lexeme.equal("minus") {
                self.expect("minus").try;

                current = Expression {
                    t_binop: struct {
                        binop: "minus",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            }
            if self.peek().lexeme.equal("as") {
                self.expect("as").try;

                current = Expression {
                    t_as: struct {
                        expr: current,
                        source_type: Type {
                            t_omit: true,
                        },
                        target_type: self.type_().try,
                    },
                };
                continue;
            }
            if self.peek().lexeme.equal("bit_and") {
                self.expect("bit_and").try;

                current = Expression {
                    t_binop: struct {
                        binop: "bit_and",
                        type_: nil,
                        left: current,
                        right: self.term_4(with_struct).try,
                    },
                };
                continue;
            }
            if self.peek().lexeme.equal("bit_or") {
                self.expect("bit_or").try;

                current = Expression {
                    t_binop: struct {
                        binop: "bit_or",
                        type_: nil,
                        left: current,
                        right: self.term_4(with_struct).try,
                    },
                };
                continue;
            }

            return current;
        }
    }

    fun term_1(self, with_struct: bool): Expression or error {
        let current = self.term_0(with_struct).try;

        while true {
            if self.peek().lexeme.equal("star") {
                self.expect("star").try;

                current = Expression {
                    t_binop: struct {
                        binop: "mult",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            } else if self.peek().lexeme.equal("slash") {
                self.expect("slash").try;

                current = Expression {
                    t_binop: struct {
                        binop: "div",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            } else if self.peek().lexeme.equal("percent") {
                self.expect("percent").try;

                current = Expression {
                    t_binop: struct {
                        binop: "mod",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            } else if self.peek().lexeme.equal("bit_shift_left") {
                self.expect("bit_shift_left").try;

                current = Expression {
                    t_binop: struct {
                        binop: "bit_shift_left",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            } else if self.peek().lexeme.equal("bit_shift_right") {
                self.expect("bit_shift_right").try;

                current = Expression {
                    t_binop: struct {
                        binop: "bit_shift_right",
                        type_: nil,
                        left: current,
                        right: self.term_1(with_struct).try,
                    },
                };
                continue;
            }

            return current;
        }
    }

    fun term_0(self, with_struct: bool): Expression or error {
        let current = self.term_0_1(with_struct).try;

        while true {
            let token = self.peek();

            if token.lexeme.equal("lparen") {
                self.expect("lparen").try;

                let args = make[vec[Expression]]();
                let expansion = nil as Expression?;
                while !self.peek().lexeme.equal("rparen") {
                    // expansion
                    if self.peek().lexeme.equal("double_dot") {
                        self.expect("double_dot").try;
                        expansion = self.expression().try?;
                        break;
                    }

                    args.push(self.expression().try);

                    if self.peek().lexeme.equal("comma") {
                        self.expect("comma").try;
                    } else {
                        break;
                    }
                }
                self.expect("rparen").try;

                current = Expression {
                    t_call: struct {
                        callee: current,
                        args: args,
                        variadic: nil,
                        expansion: expansion,
                    },
                };
            } else if token.lexeme.equal("dot") {
                self.expect("dot").try;

                if self.peek().lexeme.equal("try") {
                    self.expect("try").try;

                    current = Expression {
                        t_try: current,
                    };
                } else {
                    let field = self.ident().try;

                    current = Expression {
                        t_project: struct {
                            expr: current,
                            field: field,
                            type_: nil as Type?,
                            resolved_path: nil,
                        },
                    };
                }
            } else if with_struct && token.lexeme.equal("lbrace") {
                self.expect("lbrace").try;

                if current.t_ident == nil {
                    return _ or error::new(format("Expected identifier, got {}", current.to_string()));
                }

                let ident = current.t_ident!;
                let fields = make[vec[struct {
                    field: string,
                    value: Expression,
                }]]();

                let expansion = nil as Expression?;

                while !self.peek().lexeme.equal("rbrace") {
                    let field = self.ident().try;
                    self.expect("colon").try;
                    let value = self.expression().try;

                    fields.push(struct {
                        field: field,
                        value: value,
                    });

                    if self.peek().lexeme.equal("comma") {
                        self.expect("comma").try;

                        if self.peek().lexeme.equal("double_dot") {
                            self.expect("double_dot").try;
                            expansion = self.expression().try?;

                            if self.peek().lexeme.equal("comma") {
                                self.expect("comma").try;
                            }

                            break;
                        }
                    } else {
                        break;
                    }
                }
                self.expect("rbrace").try;

                current = Expression {
                    t_record: RecordExpression {
                        name: ident.name,
                        fields: fields,
                        expansion: expansion,
                    },
                };
            } else if token.lexeme.equal("lbracket") {
                self.expect("lbracket").try;

                if current.t_ident == nil {
                    return _ or error::new(format(
                        "Expected identifier for record name, found {}",
                        current.to_string(),
                    ));
                }

                let t = self.type_().try;
                self.expect("rbracket").try;

                self.expect("lparen").try;
                let args = make[vec[Expression]]();
                while !self.peek().lexeme.equal("rparen") {
                    args.push(self.expression().try);

                    if self.peek().lexeme.equal("comma") {
                        self.expect("comma").try;
                    } else {
                        break;
                    }
                }
                self.expect("rparen").try;

                let ident = current.t_ident!.name;
                if ident.equal("make") {
                    current = Expression {
                        t_make: struct {
                            type_: t,
                            args: args,
                        },
                    };
                } else if ident.equal("sizeof") {
                    current = Expression {
                        t_sizeof: struct {
                            type_: t,
                        },
                    };
                } else {
                    return _ or error::new(format("Unknown builtin operator {}", ident));
                }
            } else if token.lexeme.equal("double_colon") {
                self.expect("double_colon").try;

                if current.t_ident == nil {
                    return _ or error::new(format(
                        "Expected identifier for record name, found {}",
                        current.to_string(),
                    ));
                }

                let name = self.ident().try;

                let path = Path::ident(current.t_ident!.name);
                path.push(name);

                current = Expression {
                    t_path: struct {
                        path: path,
                        resolved_path: nil,
                    },
                };
            } else if token.lexeme.equal("bang") {
                self.expect("bang").try;

                current = Expression {
                    t_unwrap: struct {
                        type_: Type {
                            t_omit: true,
                        },
                        expr: current,
                    },
                };
            } else if token.lexeme.equal("question") {
                self.expect("question").try;

                current = Expression {
                    t_wrap: struct {
                        type_: Type {
                            t_omit: true,
                        },
                        expr: current,
                    },
                };
            } else {
                return current;
            }
        }

        return panic("unreachable");
    }

    fun term_0_1(self, with_struct: bool): Expression or error {
        if self.peek().lexeme.equal("ident") {
            let name = self.ident().try;

            return Expression {
                t_ident: struct {
                    name: name,
                    resolved_path: nil,
                },
            };
        }
        if self.peek().lexeme.equal("number") {
            let token = self.consume();
            if token.string_value!.compare_lte("2147483647") {
                return Expression {
                    t_i32: struct {
                        value: i32::parse(token.string_value!),
                    },
                };
            } else if token.string_value!.compare_lte("4294967295") {
                return Expression {
                    t_u32: struct {
                        value: u32::parse(token.string_value!),
                    },
                };
            } else {
                return _ or error::new(format("Invalid number {}", token.string_value!));
            }
        }
        if self.peek().lexeme.equal("self") {
            self.expect("self").try;

            return Expression {
                t_self: true,
            };
        }
        if self.peek().lexeme.equal("string") {
            let token = self.consume();

            return Expression {
                t_string: token.string_value!,
            };
        }
        if self.peek().lexeme.equal("lparen") {
            self.expect("lparen").try;

            let expr = self.expression().try;

            self.expect("rparen").try;

            return Expression {
                t_paren: expr,
            };
        }
        if self.peek().lexeme.equal("bang") {
            self.expect("bang").try;

            let expr = self.term_0(with_struct).try;

            return Expression {
                t_unop: struct {
                    unop: "not",
                    expr: expr,
                },
            };
        }
        if self.peek().lexeme.equal("true") {
            self.expect("true").try;

            return Expression {
                t_bool: true,
            };
        }
        if self.peek().lexeme.equal("false") {
            self.expect("false").try;

            return Expression {
                t_bool: false,
            };
        }
        if self.peek().lexeme.equal("nil") {
            self.expect("nil").try;

            return Expression {
                t_nil: true,
            };
        }
        if self.peek().lexeme.equal("struct") {
            self.expect("struct").try;
            self.expect("lbrace").try;

            let fields = make[vec[struct {
                field: string,
                value: Expression,
            }]]();

            while !self.peek().lexeme.equal("rbrace") {
                let ident = self.ident().try;
                self.expect("colon").try;
                let value = self.expression().try;

                fields.push(struct {
                    field: ident,
                    value: value,
                });

                if self.peek().lexeme.equal("comma") {
                    self.expect("comma").try;
                } else {
                    break;
                }
            }
            self.expect("rbrace").try;

            return Expression {
                t_anonymous_record: struct {
                    fields: fields,
                    type_: nil,
                },
            };
        }
        if self.peek().lexeme.equal("underscore") {
            self.expect("underscore").try;

            return Expression {
                t_omit: true,
            };
        }

        return _ or error::new(format("Unexpected token {} (term)", self.peek().lexeme.to_string()));
    }
}

