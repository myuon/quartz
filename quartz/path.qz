struct Path {
    path: vec[string],
}

module Path {
    fun new(..t: vec[string]): Path {
        return Path {
            path: t,
        };
    }

    fun push(self, s: string) {
        self.path.push(s);
    }

    fun ident(i: string): Path {
        return Path {
            path: make[vec[string]](i),
        };
    }

    fun join(self, delimiter: string): string {
        if self.path.length == 0 {
            return "";
        } else {
            let first = self.path.at(0);

            for i in 1..self.path.length {
                first = first.concat(delimiter).concat(self.path.at(i));
            }

            return first;
        }
    }

    fun clone(self): Path {
        let new_path = make[vec[string]]();
        for s in self.path {
            new_path.push(s);
        }

        return Path {
            path: new_path,
        };
    }

    fun extend(self, other: Path) {
        self.path.extend(other.path);
    }

    fun starts_with(self, prefix: Path): bool {
        if self.path.length < prefix.path.length {
            return false;
        }

        for i in 0..prefix.path.length {
            if self.path.at(i) != prefix.path.at(i) {
                return false;
            }
        }

        return true;
    }

    fun remove_prefix(self, prefix: Path): Path {
        if !self.starts_with(prefix) {
            return self.clone();
        }

        return Path {
            path: self.path.slice(prefix.path.length, self.path.length),
        };
    }
}

