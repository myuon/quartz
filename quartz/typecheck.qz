import quartz::ast;

type Typechecker = {
    locals: map[string, Type],
};

module Typechecker {
    fun new(): Typechecker {
        return Typechecker {
            locals: make[map[string, Type]](),
        };
    }

    fun function(self, f: Function) {
        self.block(f.body, f.result_type);
    }

    fun block(self, b: Block, expected: Type) {
        for i in 0..b.block.length {
            let result = Type {
                t_omit: true?,
                ..nil,
            };
            self.statement(b.block.at(i), result);
        }
    }

    fun statement(self, s: Statement, result_type: Type) {
        if s.t_let != nil {
            let t = self.expression(s.t_let!.expr);

            self.locals.insert(s.t_let!.name, t);
            return;
        }
        if s.t_return != nil {
            unify(self.expression(s.t_return!.expr), result_type);
            return;
        }

        panic("unimplemented: statement");
    }

    fun expression(self, expr: Expression): Type {
        if expr.t_number != nil {
            return Type {
                t_i32: true?,
                ..nil,
            };
        }
        if expr.t_binop != nil {
            if expr.t_binop!.binop.equal("plus") {
                let t1 = self.expression(expr.t_binop!.left);
                unify(t1, Type {
                    t_i32: true?,
                    ..nil,
                });

                let t2 = self.expression(expr.t_binop!.right);
                unify(t2, Type {
                    t_i32: true?,
                    ..nil,
                });

                return t1;
            }

            println(expr.t_binop!.binop);
            panic("unimplemented: binop");
        }
        if expr.t_ident != nil {
            let t = self.locals.at(expr.t_ident!.name);

            return t;
        }

        panic("unimplemented: expression");
    }
}

type Type = {
    t_omit: bool?, // for unification
    t_nil: bool?,
    t_i32: bool?,
};

module Type {
    fun to_string(self): string {
        if self.t_omit != nil {
            return "omit";
        }
        if self.t_nil != nil {
            return "nil";
        }
        if self.t_i32 != nil {
            return "i32";
        }

        panic("unimplemented: type.to_string");
    }
}

fun unify(type1: Type, type2: Type) {
    if type1.t_i32 != nil && type2.t_i32 != nil {
        return;
    }
    if type1.t_nil != nil && type2.t_nil != nil {
        return;
    }
    if type1.t_omit != nil {
        return;
    }
    if type2.t_omit != nil {
        return;
    }

    panic("unification failed: ".concat(type1.to_string()).concat(" != ").concat(type2.to_string()));
}
