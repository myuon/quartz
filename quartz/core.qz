// @[nostd]
let error_not_an_pointer = 1;

let error_stack_overflow = 2;

let error_stack_underflow = 3;

let error_nil_pointer_exception = 4;

let error_invalid_block = 5;

let error_out_of_memory = 6;

let error_invalid_type = 7;

let error_type_reps_ptr_not_initialized = 8;

let error_invalid_header = 9;

// 1.5 * 1024 * 1024 * 1024
let stack_limit: u32 = 1610612736 as u32;

let _sp: u32 = 1610612736 as u32;

let _bp: u32 = 1610612736 as u32;

@[no_allocation]
fun push_memstack(value: ptr[any]) {
    // FIXME: Removing the following comment will cause check_if_stable to fail.
    // if !_reflection_is_pointer(value) {
    //     debug(error_not_an_pointer);
    //     debug(value);
    //     abort();
    // }

    let sp_ptr = _sp as ptr[ptr[byte]];
    sp_ptr.at(0) = value;

    _sp = _sp - (sizeof[ptr[any]]() as u32);

    if (_sp - (32 as u32)) < memory_block_limit {
        debug(error_stack_overflow);
        abort();
    }
}

@[no_allocation]
fun prologue() {
    push_memstack(_bp as ptr[any]);

    _bp = _sp;
}

@[no_allocation]
fun epilogue() {
    _sp = _bp;

    let bp_ptr = (_bp as ptr[ptr[byte]]).offset(1);
    _bp = bp_ptr.at(0) as u32;

    // FIXME: when _bp == 0?
    if _bp != (0 as u32) && (_bp < _sp || _bp > stack_limit) {
        debug(_bp);
        debug(stack_limit);
        debug(error_stack_underflow);
        abort();
    }
}

@[no_allocation]
fun validate_address(address: i32) {
    let p = address as ptr[any];
    if p == nil as ptr[any] {
        debug(error_nil_pointer_exception);
        debug(1);
        abort();
    }
}

let memory_block_limit: u32 = 1073741824 as u32;

let strings_ptr: u32 = 0 as u32;

@[no_allocation]
fun load_string(index: i32): string {
    if strings_ptr == (0 as u32) {
        debug(error_nil_pointer_exception);
        debug(2);
        abort();
    }

    return (strings_ptr as ptr[string]).at(index);
}

let alloc_ptr: u32 = 0 as u32;

let alloc_count = 0;

@[no_allocation]
fun alloc_with_rep(rep: ptr[ptr[byte]], size: i32): ptr[any] {
    let size_ = size;
    if size % sizeof[i32]() != 0 {
        size_ = ((size + sizeof[i32]() - 1) / sizeof[i32]()) * sizeof[i32]();
    }
    if size == 0 {
        return nil as ptr[any];
    }

    let current = alloc_ptr;
    alloc_ptr = alloc_ptr + (size_ as u32);

    let block = find_free_block((size_ as u32) + Header::sizeof());
    if !block.get_is_free() {
        debug(error_invalid_block);
        abort();
    }

    // split
    block.set_size(block.get_size() - (size_ as u32) - Header::sizeof());
    if block.get_size() <= (0 as u32) {
        debug(error_invalid_block);
        abort();
    }
    block.set_is_free(true);

    let current = block.get_next();
    current.set_size(size_ as u32);
    current.set_is_free(false);
    current.set_type_rep(rep);

    alloc_count = alloc_count + 1;
    if alloc_count > 5000000 {
        perform_gc();

        alloc_count = 0;
    }

    return current.get_data_ptr();
}

@[no_allocation]
fun find_free_block(size: u32): Header {
    if (heap_root_ptr as ptr[any]) == (nil as ptr[any]) {
        let current = Header::from_ptr(alloc_ptr as ptr[any]);
        current.set_size(memory_block_limit);
        current.set_is_free(true);
        heap_root_ptr = alloc_ptr;
    }

    let current = Header::from_ptr(heap_root_ptr as ptr[any]);
    while (current as u32) < (_sp - (32 as u32)) {
        if current.get_is_free() && current.get_size() > size {
            return current;
        }

        current = current.get_next();
    }

    // try again!
    perform_gc();

    let current = Header::from_ptr(heap_root_ptr as ptr[any]);
    while (current as u32) < (_sp - (32 as u32)) {
        if current.get_is_free() && current.get_size() > size {
            return current;
        }

        current = current.get_next();
    }

    debug(error_out_of_memory);
    abort();
}

// size: u32,
// header_flags: u32,
// rep: *StructData[TypeRep]
struct Header {
}

module Header {
    @[no_allocation]
    fun sizeof(): u32 {
        return (sizeof[u32]() + sizeof[u32]() + sizeof[ptr[byte]]()) as u32;
    }

    @[no_allocation]
    fun from_ptr(p: ptr[byte]): Header {
        return p as Header;
    }

    @[no_allocation]
    fun from_data_ptr(p: ptr[byte]): Header {
        let header = Header::from_ptr(p.offset(0 - (Header::sizeof() as i32)));
        header.validate();

        return header;
    }

    @[no_allocation]
    fun get_next(self): Header {
        return Header::from_ptr((self as ptr[byte]).offset((Header::sizeof() + self.get_size()) as i32));
    }

    @[no_allocation]
    fun get_data_ptr(self): ptr[byte] {
        return (self as ptr[byte]).offset(Header::sizeof() as i32);
    }

    @[no_allocation]
    fun get_is_free(self): bool {
        return (self.get_header_flags() & 1 as u32) == (1 as u32);
    }

    @[no_allocation]
    fun set_is_free(self, value: bool) {
        if value {
            self.set_header_flags(self.get_header_flags() | (1 as u32));
        } else {
            self.set_header_flags(self.get_header_flags() & bit_not_u32(1 as u32));
        }
    }

    @[no_allocation]
    fun get_is_marked(self): bool {
        return (self.get_header_flags() & 2 as u32) == 2 as u32;
    }

    @[no_allocation]
    fun set_is_marked(self, value: bool) {
        if value {
            self.set_header_flags(self.get_header_flags() | (2 as u32));
        } else {
            self.set_header_flags(self.get_header_flags() & bit_not_u32(2 as u32));
        }
    }

    @[no_allocation]
    fun get_size(self): u32 {
        return (self as ptr[any]).at(0);
    }

    @[no_allocation]
    fun set_size(self, value: u32) {
        (self as ptr[any]).at(0) = value;
    }

    @[no_allocation]
    fun get_header_flags(self): u32 {
        return (self as ptr[any]).at(1);
    }

    @[no_allocation]
    fun set_header_flags(self, value: u32) {
        (self as ptr[any]).at(1) = value;
    }

    @[no_allocation]
    fun get_type_rep(self): ptr[ptr[byte]] {
        return (self as ptr[any]).at(2);
    }

    @[no_allocation]
    fun set_type_rep(self, value: ptr[ptr[byte]]) {
        (self as ptr[any]).at(2) = value;
    }

    @[no_allocation]
    fun validate(self) {
        if !types::is_i32(self.get_size()) {
            debug(error_invalid_header);
            debug(1);
            debug(self);
            abort();
        }

        if !types::is_i32(self.get_header_flags()) {
            debug(error_invalid_header);
            debug(2);
            debug(self);
            abort();
        }

        if !types::is_pointer(self.get_type_rep()) {
            debug(error_invalid_header);
            debug(3);
            debug(self);
            abort();
        }

        if !is_typerep_pointer(self.get_type_rep() as ptr[byte]) {
            debug(error_invalid_header);
            debug(4);
            debug(self);
            abort();
        }
    }
}

@[no_allocation]
fun bit_not_u32(x: u32): u32 {
    return xor_u32(x, 4294967295); // 2^32 - 1
}

fun new_string(p: ptr[byte], length: i32): string {
    return string {
        data: p,
        length: length,
    };
}

let type_reps_ptr: ptr[ptr[any]] = (nil as ptr[ptr[any]]);

@[no_allocation]
fun get_type_rep_address(rep_id: i32): ptr[ptr[any]] {
    if type_reps_ptr == (nil as ptr[ptr[any]]) {
        debug(error_type_reps_ptr_not_initialized);
        abort();
    }

    return type_reps_ptr.offset(rep_id);
}

@[no_allocation]
fun get_typetag(value: any): i32 {
    return _get_typetag(value);
}

@[no_allocation]
fun is_stack_pointer(value: ptr[byte]): bool {
    return (value as u32) >= _sp;
}

@[no_allocation]
fun is_typerep_pointer(p: ptr[byte]): bool {
    let p_address = p as i32;
    let type_reps_ptr_address = type_reps_ptr as i32;

    return p_address >= type_reps_ptr_address && p_address < ((type_reps_ptr as ptr[any]).offset(
        type_reps_count,
    )) as i32;
}

