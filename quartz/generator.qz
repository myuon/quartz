import quartz::ast;
import quartz::ir;

type Generator = {
    writer: string,
    depth: i32,
    index: i32,
};

module Generator {
    fun new(): Generator {
        return Generator {
            writer: "",
            depth: 0,
            index: 0,
        };
    }

    fun start(self) {
        self.new_statement();
        self.write("(");
        self.depth = self.depth + 1;
        self.index = 0;
    }

    fun end(self) {
        self.depth = self.depth - 1;
        self.index = 0;
        self.write(")");
    }

    fun write(self, str: string) {
        if self.index == 0 {
            self.writer = self.writer.concat(str);
        } else {
            self.writer = self.writer.concat(" ").concat(str);
        }
        self.index = self.index + 1;
    }

    fun new_statement(self) {
        if self.index > 0 {
            self.writer = self.writer.concat("\n").concat(" ".repeat(self.depth * 2));
        }
        self.index = 0;
    }

    fun generate(self): string {
        return self.writer;
    }

    fun run(self, m: IrTerm): string {
        self.start();
        self.write("module");

        if m.t_module != nil {
            for i in 0..m.t_module!.elements.length {
                let element = m.t_module!.elements.at(i);

                if element.t_func != nil {
                    self.function(element.t_func!);
                    continue;
                }

                panic("expected function");
            }
        } else {
            panic("expected module");
        }

        self.start();
        self.write("export \"main\" (func $main)");
        self.end();

        self.end();

        return self.generate();
    }

    fun function(self, func: IrFunc): Generator {
        self.start();
        self.write("func");
        self.write("$".concat(func.name));

        for i in 0..func.params.length {
            let p = func.params.at(i);
            self.write("(param $".concat(p.name).concat(" ").concat(p.type_.to_string()).concat(")"));
        }

        self.write("(result ".concat(func.result_type.to_string()).concat(")"));

        for i in 0..func.locals.length {
            self.new_statement();
            self.start();
            self.write("local $".concat(func.locals.at(i)).concat(" i32"));
            self.end();
        }

        for i in 0..func.body.length {
            self.expression(func.body.at(i));
        }
        
        self.end();

        return self;
    }

    fun expression(self, expr: IrTerm) {
        if expr.t_ident != nil {
            self.write("local.get $".concat(expr.t_ident!));
            return;
        }
        if expr.t_i32 != nil {
            self.write("i32.const ".concat(expr.t_i32!));
            return;
        }
        if expr.t_let != nil {
            self.new_statement();
            self.expression(expr.t_let!.value);
            self.expression_left_value(IrTerm {
                t_ident: expr.t_let!.name?,
                ..nil,
            });
            return;
        }
        if expr.t_return != nil {
            self.new_statement();
            self.expression(expr.t_return!.value);

            self.new_statement();
            self.write("return");
            return;
        }
        if expr.t_call != nil {
            for i in 0..expr.t_call!.args.length {
                self.new_statement();
                self.expression(expr.t_call!.args.at(i));
            }

            self.new_statement();

            let callee = expr.t_call!.callee;
            if callee.t_ident != nil {
                let ident = callee.t_ident!;
                if ident.equal("add") {
                    self.write("i32.add");
                    return;
                } else {
                    self.write("call $".concat(ident));
                    return;
                }
            } else {
                panic("not implemented");
            }

            return;
        }

        panic("not implemented");
    }

    fun expression_left_value(self, expr: IrTerm) {
        if expr.t_ident != nil {
            self.new_statement();
            self.write("local.set $".concat(expr.t_ident!));
            return;
        }

        panic("not implemented");
    }
}
