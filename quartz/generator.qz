import quartz::ast;
import quartz::ir;
import quartz::value;

let MODE_READABLE_WASM = true;

struct Generator {
    writer: string,
    depth: i32,
    index: i32,
    globals: map[string, Type],
    strings: vec[string],
    main_signature_result: IrType?,
}

module Generator {
    fun new(): Generator {
        return Generator {
            writer: "",
            depth: 0,
            index: 0,
            globals: make[map[string, Type]](),
            strings: make[vec[string]](),
            main_signature_result: nil as IrType?,
        };
    }

    fun start(self) {
        self.new_statement();
        self.write("(");
        self.depth = self.depth + 1;
        self.index = 0;
    }

    fun end(self) {
        self.depth = self.depth - 1;
        self.index = 0;
        self.write(")");
    }

    fun write(self, str: string) {
        if self.index == 0 {
            self.writer = self.writer.concat(str);
        } else {
            self.writer = self.writer.concat(" ").concat(str);
        }
        self.index = self.index + 1;
    }

    fun new_statement(self) {
        if self.index > 0 {
            self.writer = self.writer.concat("\n").concat(" ".repeat(self.depth * 2));
        }
        self.index = 0;
    }

    fun set_globals(self, globals: map[string, Type]) {
        self.globals = globals;
    }

    fun set_strings(self, strings: vec[string]) {
        self.strings = strings;
    }

    fun generate(self): string {
        return self.writer;
    }

    fun decl(self, element: IrTerm) {
        if element.t_func != nil {
            self.function(element.t_func!);
        } else if element.t_global_let != nil {
            self.global_let(element.t_global_let!);
        } else if element.t_module != nil {
            for i in 0..element.t_module!.elements.length {
                self.decl(element.t_module!.elements.at(i));
            }
        } else if element.t_data != nil {
            self.start();
            self.write("data");
            self.write(format("(i32.const {})", element.t_data!.offset.to_string()));
            self.write(format("\"{}\"", element.t_data!.data));
            self.end();
        } else {
            panic("decl: {}", element.to_string());
        }
    }

    fun run(self, m: IrTerm, data_section_offset: i32): string {
        self.start();
        self.write("module");

        self.start();
        self.write(`import "env" "debug" (func $debug (param i64) (result i64))`);
        self.end();

        if m.t_module != nil {
            for i in 0..m.t_module!.elements.length {
                let element = m.t_module!.elements.at(i);

                self.decl(element);
            }
        } else {
            panic("expected module");
        }

        self.global_let(struct {
            name: "_value_i32_0",
            type_: IrType {
                t_i32: true?,
                ..nil,
            },
            value: IrTerm {
                t_i32: 0?,
                ..nil,
            },
        });

        self.global_let(struct {
            name: "_value_i32_1",
            type_: IrType {
                t_i32: true?,
                ..nil,
            },
            value: IrTerm {
                t_i32: 0?,
                ..nil,
            },
        });

        self.start();
        self.write("memory 10");
        self.end();

        self.start();
        self.write(
            `func $alloc (param $size i64) (result i64)
    (local $p i64)

    global.get $quartz_std_alloc_ptr
    local.set $p

    global.get $quartz_std_alloc_ptr
    local.get $size
    i64.add
    global.set $quartz_std_alloc_ptr

    local.get $p
`,
        );
        self.end();

        self.start();
        self.write(`func $i32_mul (param $a i64) (param $b i64) (result i64)`);

        self.new_statement();
        self.write("local.get $a");

        self.new_statement();
        self.write("local.get $b");

        self.convert_stack_to_i32_2();

        self.new_statement();
        self.write("i32.mul");

        self.convert_stack_from_i32_1();
        self.end();

        self.decl(IrTerm {
            t_func: IrFunc {
                name: "start",
                params: make[vec[struct {
                    name: string,
                    type_: IrType,
                }]](),
                result_type: self.main_signature_result!,
                body: make[vec[IrTerm]](
                    IrTerm {
                        t_assign: struct {
                            lhs: "quartz_std_alloc_ptr",
                            rhs: IrTerm {
                                t_i32: data_section_offset?,
                                ..nil,
                            },
                        }?,
                        ..nil,
                    },
                    IrTerm {
                        t_discard: IrTerm {
                            t_inst: "(memory.grow (i32.const 100000))"?,
                            ..nil,
                        }?,
                        ..nil,
                    },
                    IrTerm {
                        t_call: IrCall {
                            callee: IrTerm {
                                t_ident: "prepare_strings"?,
                                ..nil,
                            },
                            args: make[vec[IrTerm]](),
                        }?,
                        ..nil,
                    },
                    IrTerm {
                        t_return: IrReturn {
                            value: IrTerm {
                                t_inst: "(call $main)"?,
                                ..nil,
                            },
                        }?,
                        ..nil,
                    },
                ),
                locals: make[vec[string]](),
            }?,
            ..nil,
        });

        self.start();
        self.write("export \"main\" (func $start)");
        self.end();

        self.end();

        return self.generate();
    }

    fun global_let(
        self,
        global_let: struct {
            name: string,
            type_: IrType,
            value: IrTerm,
        },
    ) {
        self.start();
        self.write(format("global ${} (mut {})", global_let.name, "i64"));
        self.start();
        self.expression(global_let.value);
        self.end();
        self.end();
    }

    fun function(self, func: IrFunc) {
        if func.name.equal("main") {
            self.main_signature_result = func.result_type?;
        }

        self.start();
        self.write("func");
        self.write("$".concat(func.name));

        for i in 0..func.params.length {
            let p = func.params.at(i);
            self.write("(param $".concat(p.name).concat(" ").concat("i64").concat(")"));
        }

        if !func.result_type.is_nil() {
            self.write("(result i64)");
        }

        for statement in func.body {
            let locals = statement.find_locals();
            for local in locals {
                self.new_statement();
                self.start();
                self.write(format("local ${} {}", local, "i64"));
                self.end();
            }
        }

        for i in 0..func.body.length {
            self.expression(func.body.at(i));
        }

        // When the last instruction is exhaustive if block, we still need to put soemthing to tell the compiler that the function forgets to return
        if !func.result_type.is_nil() {
            self.new_statement();
            self.write("unreachable");
        }

        self.end();
    }

    fun expression(self, expr: IrTerm) {
        if expr.t_ident != nil {
            if self.globals.has(expr.t_ident!) {
                self.write("global.get");
            } else {
                self.write("local.get");
            }
            self.write(format("${}", expr.t_ident!));
        } else if expr.t_i32 != nil {
            if MODE_READABLE_WASM {
                self.new_statement();
                self.write(format(" ;; {}", expr.t_i32!.to_string()));
            }

            self.write_value(Value {
                t_i32: expr.t_i32!?,
                ..nil,
            });
        } else if expr.t_nil != nil {
            if MODE_READABLE_WASM {
                self.new_statement();
                self.write(" ;; nil");
            }

            self.write_value(Value::nil());
        } else if expr.t_let != nil {
            self.new_statement();
            self.expression(expr.t_let!.value);
            self.expression_left_value(IrTerm {
                t_ident: expr.t_let!.name?,
                ..nil,
            });
        } else if expr.t_return != nil {
            self.new_statement();
            self.expression(expr.t_return!.value);

            self.new_statement();
            self.write("return");
        } else if expr.t_call != nil {
            for i in 0..expr.t_call!.args.length {
                self.new_statement();
                self.expression(expr.t_call!.args.at(i));
            }

            self.new_statement();

            let callee = expr.t_call!.callee;
            if callee.t_ident != nil {
                let ident = callee.t_ident!;
                if ident.equal("add") {
                    self.write("i64.add");
                } else if ident.equal("sub") {
                    self.write("i64.sub");
                } else if ident.equal("mult") {
                    self.write("call $i32_mul");
                } else if ident.equal("div") {
                    self.generate_op_arithmetic("div_s");
                } else if ident.equal("mod") {
                    self.generate_op_arithmetic("rem_s");
                } else if ident.equal("equal") {
                    self.write("i64.eq");
                    self.convert_stack_from_bool_1();
                } else if ident.equal("not_equal") {
                    self.generate_op_comparison("ne");
                } else if ident.equal("lt") {
                    self.generate_op_comparison("lt_s");
                } else if ident.equal("gt") {
                    self.generate_op_comparison("gt_s");
                } else if ident.equal("lte") {
                    self.generate_op_comparison("le_s");
                } else if ident.equal("gte") {
                    self.generate_op_comparison("ge_s");
                } else if ident.equal("i32_to_address") {
                    self.convert_value_i32_to_address_1();
                } else if ident.equal("i32_to_byte") {
                    self.convert_value_i32_to_byte_1();
                } else if ident.equal("byte_to_i32") {
                    self.convert_value_byte_to_i32_1();
                } else {
                    self.write("call $".concat(ident));
                }
            } else {
                panic("not implemented: call");
            }
        } else if expr.t_assign != nil {
            self.expression(expr.t_assign!.rhs);

            self.new_statement();
            if self.globals.has(expr.t_assign!.lhs) {
                self.write("global.set");
            } else {
                self.write("local.set");
            }
            self.write(format("${}", expr.t_assign!.lhs));
        } else if expr.t_if != nil {
            self.new_statement();
            self.expression(expr.t_if!.condition);
            self.convert_stack_to_bool();

            self.start();
            self.write("if");

            self.start();
            self.write("then");
            self.expression(expr.t_if!.then_term);
            self.end();

            self.start();
            self.write("else");
            self.expression(expr.t_if!.else_term);
            self.end();

            self.end();
        } else if expr.t_seq != nil {
            for i in 0..expr.t_seq!.terms.length {
                self.expression(expr.t_seq!.terms.at(i));
            }
        } else if expr.t_while != nil {
            // [while(cond) {block, cleanup}]

            // (block $exit
            //     (loop $loop
            //         (block $continue
            //             (br_if $exit (i32.eqz (cond)))
            //             ($body)
            //         )

            //         ($cleanup)
            //         (br $loop)
            //     )
            // )

            self.new_statement();
            self.start();
            self.write("block");
            self.write("$exit");

            self.start();
            self.write("loop");
            self.write("$loop");

            self.start();
            self.write("block");
            self.write("$continue");

            self.expression(expr.t_while!.condition);
            self.convert_stack_to_bool();

            self.new_statement();
            self.write("i32.eqz");
            self.new_statement();
            self.write("br_if $exit");

            self.expression(expr.t_while!.block);
            self.end();

            if expr.t_while!.cleanup != nil {
                self.expression(expr.t_while!.cleanup!);
            }

            self.new_statement();
            self.write("br $loop");

            self.end();
            self.end();
        } else if expr.t_load != nil {
            self.new_statement();
            self.expression(expr.t_load!.address);

            self.new_statement();
            self.expression(expr.t_load!.offset);

            self.convert_stack_to_i32_2();

            self.new_statement();
            self.write("i32.add");

            let load_size = expr.t_load!.type_.sizeof() * 8;
            let suffix = "";
            if load_size != 64 {
                suffix = format("{}_u", load_size.to_string());
            }

            self.new_statement();
            self.write(format("{}.load{}", Value::wasm_type(), suffix));
            self.write("offset=8");

            if expr.t_load!.type_.t_byte != nil {
                self.new_statement();
                self.write("i64.const 32");

                self.new_statement();
                self.write("i64.shl");

                self.new_statement();
                self.write("i64.const 4");

                self.new_statement();
                self.write("i64.xor");
            }
        } else if expr.t_store != nil {
            self.new_statement();
            self.expression(expr.t_store!.address);

            self.new_statement();
            self.expression(expr.t_store!.offset);

            self.convert_stack_to_i32_2();

            self.new_statement();
            self.write("i32.add");

            self.new_statement();
            self.expression(expr.t_store!.value);

            let store_size = expr.t_store!.type_.sizeof() * 8;

            if store_size != 64 {
                self.new_statement();
                self.write(format("i64.const 32"));

                self.new_statement();
                self.write(format("i64.shr_u"));
            }

            let suffix = "";
            if store_size != 64 {
                suffix = format("{}", store_size.to_string());
            }

            self.new_statement();
            self.write(format("i64.store{}", suffix));
            self.write("offset=8");
        } else if expr.t_sizeof != nil {
            let size = expr.t_sizeof!.type_.sizeof();

            self.new_statement();
            self.write(format(" ;; {} (sizeof)", size.to_string()));

            self.new_statement();
            self.write_value(Value {
                t_i32: size?,
                ..nil,
            });
        } else if expr.t_string != nil {
            self.new_statement();
            self.write(format(";; string: {}", self.strings.at(expr.t_string!)));

            self.new_statement();
            self.write(format("i32.const {}", expr.t_string!.to_string()));

            self.convert_stack_from_i32_1();

            self.new_statement();
            self.write("call $load_string");
        } else if expr.t_discard != nil {
            self.new_statement();
            self.expression(expr.t_discard!);

            self.new_statement();
            self.write("drop");
        } else if expr.t_inst != nil {
            self.new_statement();
            self.write(expr.t_inst!);
        } else if expr.t_bool != nil {
            if MODE_READABLE_WASM {
                self.new_statement();
                self.write(format(" ;; {}", expr.t_bool!.to_string()));
            }

            self.new_statement();
            self.write_value(Value {
                t_bool: expr.t_bool!?,
                ..nil,
            });
        } else if expr.t_and != nil {
            self.generate_if(
                IrType {
                    t_bool: true?,
                    ..nil,
                }?,
                expr.t_and!.lhs,
                expr.t_and!.rhs,
                IrTerm {
                    t_bool: false?,
                    ..nil,
                },
            );
        } else if expr.t_or != nil {
            self.generate_if(
                IrType {
                    t_bool: true?,
                    ..nil,
                }?,
                expr.t_or!.lhs,
                IrTerm {
                    t_bool: true?,
                    ..nil,
                },
                expr.t_or!.rhs,
            );
        } else if expr.t_sizeof != nil {
            let size = expr.t_sizeof!.type_.sizeof();

            self.new_statement();
            self.write(format(" ;; {} (sizeof)", size.to_string()));

            self.new_statement();
            self.write_value(Value {
                t_i32: size?,
                ..nil,
            });
        } else if expr.t_continue != nil {
            self.new_statement();
            self.write("br $continue");
        } else if expr.t_break != nil {
            self.new_statement();
            self.write("br $exit");
        } else {
            panic("not implemented: expr, {}", expr.to_string());
        }
    }

    fun expression_left_value(self, expr: IrTerm) {
        if expr.t_ident != nil {
            self.new_statement();
            if self.globals.has(expr.t_ident!) {
                self.write("global.set");
            } else {
                self.write("local.set");
            }
            self.write(format("${}", expr.t_ident!));
            return;
        }

        panic("not implemented: expr_lhs");
    }

    fun write_value(self, value: Value) {
        self.new_statement();
        self.write(format("{}.const {}", Value::wasm_type(), value.as_i64().to_string()));
    }

    fun convert_stack_to_i32_2(self) {
        self.new_statement();
        self.write("global.set $_value_i32_1");

        self.convert_stack_to_i32_1();

        self.new_statement();
        self.write("global.get $_value_i32_1");

        self.convert_stack_to_i32_1();
    }

    fun convert_stack_to_i32_1(self) {
        self.new_statement();
        self.write("i64.const 32");

        self.new_statement();
        self.write("i64.shr_u");

        self.new_statement();
        self.write("i32.wrap_i64");
    }

    fun convert_stack_from_i32_1(self) {
        self.new_statement();
        self.write("i64.extend_i32_s");

        self.new_statement();
        self.write("i64.const 32");

        self.new_statement();
        self.write("i64.shl");
    }

    fun convert_stack_from_bool_1(self) {
        self.new_statement();
        self.write("i64.extend_i32_s");

        self.new_statement();
        self.write("i64.const 32");

        self.new_statement();
        self.write("i64.shl");

        self.new_statement();
        self.write("i64.const 2");

        self.new_statement();
        self.write("i64.or");
    }

    fun convert_stack_to_bool(self) {
        self.new_statement();
        self.write("i64.const 32");

        self.new_statement();
        self.write("i64.shr_u");

        self.new_statement();
        self.write("i64.const 1");

        self.new_statement();
        self.write("i64.and");

        self.new_statement();
        self.write("i32.wrap_i64");
    }

    fun generate_op_arithmetic(self, code: string) {
        self.convert_stack_to_i32_2();
        self.write(format("i32.{}", code));
        self.convert_stack_from_i32_1();
    }

    fun generate_op_comparison(self, code: string) {
        self.convert_stack_to_i32_2();
        self.write(format("i32.{}", code));
        self.convert_stack_from_bool_1();
    }

    fun convert_value_i32_to_address_1(self) {
        self.new_statement();
        self.write("i64.const 1");

        self.new_statement();
        self.write("i64.xor");
    }

    fun convert_value_i32_to_byte_1(self) {
        self.new_statement();
        self.write("i64.const 4");

        self.new_statement();
        self.write("i64.xor");
    }

    fun convert_value_byte_to_i32_1(self) {
        self.new_statement();
        self.write("i64.const 4");

        self.new_statement();
        self.write("i64.xor");
    }

    fun generate_if(self, type_: IrType?, cond: IrTerm, then: IrTerm, else_: IrTerm) {
        self.new_statement();
        self.expression(cond);
        self.convert_stack_to_bool();

        self.start();
        if type_ != nil {
            self.write(format("if (result {})", "i64"));
        } else {
            self.write("if");
        }

        self.start();
        self.write("then");
        self.expression(then);
        self.end();

        self.start();
        self.write("else");
        self.expression(else_);
        self.end();

        self.end();
    }
}

