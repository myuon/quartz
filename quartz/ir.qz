import quartz::ast;
import quartz::path;

enum IrTerm {
    t_nil: bool,
    t_i32: i32,
    t_ident: string,
    t_func: IrFunc,
    t_call: IrCall,
    t_let: IrLet,
    t_return: IrReturn,
    t_module: struct {
        elements: vec[IrTerm],
    },
    t_global_let: struct {
        name: string,
        type_: IrType,
        value: IrTerm,
    },
    t_assign: struct {
        lhs: string,
        rhs: IrTerm,
    },
    t_if: struct {
        condition: IrTerm,
        then_term: IrTerm,
        else_term: IrTerm,
    },
    t_while: struct {
        condition: IrTerm,
        block: IrTerm,
        cleanup: IrTerm?,
    },
    t_seq: struct {
        terms: vec[IrTerm],
    },
    t_store: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
        value: IrTerm,
    },
    t_load: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
    },
    t_sizeof: struct {
        type_: IrType,
    },
    t_string: i32,
    t_data: struct {
        data: string,
        offset: i32,
    },
    t_discard: IrTerm,
    t_inst: string,
    t_bool: bool,
    t_and: struct {
        lhs: IrTerm,
        rhs: IrTerm,
    },
    t_or: struct {
        lhs: IrTerm,
        rhs: IrTerm,
    },
    t_continue: bool,
    t_break: bool,
    t_size: IrType,
    t_u32: u32,
    t_comment: string,
    t_type_rep: i32,
    t_import: struct {
        namespace: string,
        wrap_name: string,
        import_name: string,
        func_type: struct {
            params: vec[string],
            result_type: string,
        },
    },
    t_wasm_func: struct {
        name: string,
        wrapping_name: string,
        params: vec[struct {
            name: string,
            quartz_type: IrType,
            wasm_type: string,
        }],
        result_type: struct {
            quartz_type: IrType,
            wasm_type: string,
        },
    },
    t_dynamic_call: struct {
        callee_type: IrType,
        callee_id: IrTerm,
        args: vec[IrTerm],
    },
    t_funcref_table: struct {
        functions: vec[string],
    }
}

module IrTerm {
    fun to_string(self): string {
        let writer = IrTermWriter::new();
        writer.expression(self);

        return writer.to_string();
    }

    fun ident(name: string): IrTerm {
        return IrTerm {
            t_ident: name,
        };
    }

    fun i32(value: i32): IrTerm {
        return IrTerm {
            t_i32: value,
        };
    }

    fun find_locals(
        self,
    ): vec[struct {
        name: string,
        type_: IrType,
    }] {
        let locals = make[vec[struct {
            name: string,
            type_: IrType,
        }]]();

        if self.t_let != nil {
            locals.push(struct {
                name: self.t_let!.name,
                type_: self.t_let!.type_,
            });
            locals.extend(self.t_let!.value.find_locals());
        }
        if self.t_call != nil {
            locals.extend(self.t_call!.callee.find_locals());
            for arg in self.t_call!.args {
                locals.extend(arg.find_locals());
            }
        }
        if self.t_seq != nil {
            for term in self.t_seq!.terms {
                locals.extend(term.find_locals());
            }
        }
        if self.t_if != nil {
            locals.extend(self.t_if!.condition.find_locals());
            locals.extend(self.t_if!.then_term.find_locals());
            locals.extend(self.t_if!.else_term.find_locals());
        }
        if self.t_while != nil {
            locals.extend(self.t_while!.condition.find_locals());
            locals.extend(self.t_while!.block.find_locals());
            if self.t_while!.cleanup != nil {
                locals.extend(self.t_while!.cleanup!.find_locals());
            }
        }
        if self.t_store != nil {
            locals.extend(self.t_store!.address.find_locals());
            locals.extend(self.t_store!.offset.find_locals());
            locals.extend(self.t_store!.value.find_locals());
        }
        if self.t_load != nil {
            locals.extend(self.t_load!.address.find_locals());
            locals.extend(self.t_load!.offset.find_locals());
        }
        if self.t_assign != nil {
            locals.extend(self.t_assign!.rhs.find_locals());
        }
        if self.t_return != nil {
            locals.extend(self.t_return!.value.find_locals());
        }
        if self.t_assign != nil {
            locals.extend(self.t_assign!.rhs.find_locals());
        }
        if self.t_discard != nil {
            locals.extend(self.t_discard!.find_locals());
        }
        if self.t_and != nil {
            locals.extend(self.t_and!.lhs.find_locals());
            locals.extend(self.t_and!.rhs.find_locals());
        }
        if self.t_or != nil {
            locals.extend(self.t_or!.lhs.find_locals());
            locals.extend(self.t_or!.rhs.find_locals());
        }

        return locals;
    }
}

struct IrFunc {
    name: string,
    params: vec[struct {
        name: string,
        type_: IrType,
    }],
    result_type: IrType,
    body: vec[IrTerm],
    ffi_export: string?,
    escaping: vec[string],
}

struct IrCall {
    callee: IrTerm,
    args: vec[IrTerm],
}

struct IrLet {
    name: string,
    type_: IrType,
    value: IrTerm,
}

struct IrReturn {
    value: IrTerm,
}

enum IrType {
    t_nil: bool,
    t_i32: bool,
    t_address: bool,
    t_byte: bool,
    t_bool: bool,
    t_any: bool,
    t_i64: bool,
    t_externref: bool,
    t_func: struct {
        params: vec[IrType],
        result_type: IrType,
    },
}

module IrType {
    fun new(t: Type): IrType {
        if t.t_nil != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_i32 != nil {
            return IrType {
                t_i32: true,
            };
        }
        if t.t_ident != nil {
            if t.t_ident!.equal("i64") {
                return IrType {
                    t_i64: true,
                };
            }
            if t.t_ident! == "externref" {
                return IrType {
                    t_externref: true,
                };
            }

            return IrType {
                t_address: true,
            };
        }
        if t.t_byte != nil {
            return IrType {
                t_byte: true,
            };
        }
        if t.t_ptr != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_optional != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_bool != nil {
            return IrType {
                t_bool: true,
            };
        }
        if t.t_vec != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_or != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_any != nil {
            return IrType {
                t_any: true,
            };
        }
        if t.t_u32 != nil {
            return IrType {
                t_i32: true,
            };
        }
        if t.t_struct != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_map != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_func != nil {
            let params = make[vec[IrType]]();
            for param in t.t_func!.params {
                params.push(IrType::new(param));
            }

            return IrType {
                t_func: struct {
                    params: params,
                    result_type: IrType::new(t.t_func!.result),
                },
            };
        }
        if t.t_closure != nil {
            let params = make[vec[IrType]]();
            for param in t.t_closure!.params {
                params.push(IrType::new(param));
            }

            return IrType {
                t_func: struct {
                    params: params,
                    result_type: IrType::new(t.t_closure!.result),
                },
            };
        }

        return panic("unknown type: {} (IrType::new)", t.to_string());
    }

    fun to_string(self): string {
        return derive::to_string(self);
    }

    fun is_nil(self): bool {
        return self.t_nil != nil;
    }

    fun sizeof(self): i32 {
        if self.t_byte != nil {
            return 1;
        } else {
            return 8;
        }
    }
}

struct IrTermWriter {
    writer: stringbuilder,
    depth: i32,
    index: i32,
}

module IrTermWriter {
    fun new(): IrTermWriter {
        return IrTermWriter {
            writer: stringbuilder::new(),
            depth: 0,
            index: 0,
        };
    }

    fun to_string(self): string {
        return self.writer.to_string();
    }

    fun start(self) {
        self.new_statement();
        self.write("(");
        self.depth = self.depth + 1;
        self.index = 0;
    }

    fun end(self) {
        self.depth = self.depth - 1;
        self.index = 0;
        self.write(")");
    }

    fun write(self, str: string) {
        if self.index == 0 {
            self.writer.append(str);
        } else {
            self.writer.append(" ");
            self.writer.append(str);
        }
        self.index = self.index + 1;
    }

    fun new_statement(self) {
        if self.index > 0 {
            self.writer.append("\n");
            self.writer.append(" ".repeat(self.depth * 4));
        }
        self.index = 0;
    }

    fun expression(self, term: IrTerm) {
        if term.t_nil != nil {
            self.write("nil");
        } else if term.t_i32 != nil {
            self.write("{}".format(term.t_i32!.to_string()));
        } else if term.t_ident != nil {
            self.write("${}".format(term.t_ident!));
        } else if term.t_func != nil {
            self.start();
            self.write("func ${}".format(term.t_func!.name));
            for param in term.t_func!.params {
                self.write("(params ${} {})".format(param.name, param.type_.to_string()));
            }
            self.write("(result {})".format(term.t_func!.result_type.to_string()));

            self.start();
            for t in term.t_func!.body {
                self.expression(t);
            }
            self.end();

            self.end();
        } else if term.t_call != nil {
            self.start();
            self.write("call");
            self.expression(term.t_call!.callee);
            for arg in term.t_call!.args {
                self.expression(arg);
            }
            self.end();
        } else if term.t_let != nil {
            self.start();
            self.write("let ${} {}".format(term.t_let!.name, term.t_let!.type_.to_string()));
            self.expression(term.t_let!.value);
            self.end();
        } else if term.t_return != nil {
            self.start();
            self.write("return");
            self.expression(term.t_return!.value);
            self.end();
        } else if term.t_global_let != nil {
            self.start();
            self.write("global-let ${} {}".format(
                term.t_global_let!.name,
                term.t_global_let!.type_.to_string(),
            ));
            self.expression(term.t_global_let!.value);
            self.end();
        } else if term.t_module != nil {
            self.start();
            self.write("module");
            for element in term.t_module!.elements {
                self.expression(element);
            }
            self.end();
        } else if term.t_assign != nil {
            self.start();
            self.write("assign");
            self.write("${}".format(term.t_assign!.lhs));
            self.expression(term.t_assign!.rhs);
            self.end();
        } else if term.t_if != nil {
            self.start();
            self.write("if");
            self.expression(term.t_if!.condition);
            self.expression(term.t_if!.then_term);
            self.expression(term.t_if!.else_term);
            self.end();
        } else if term.t_while != nil {
            self.start();
            self.write("while");
            self.expression(term.t_while!.condition);
            self.expression(term.t_while!.block);
            if term.t_while!.cleanup != nil {
                self.expression(term.t_while!.cleanup!);
            }
        } else if term.t_seq != nil {
            self.start();
            self.write("seq");
            for t in term.t_seq!.terms {
                self.expression(t);
            }
            self.end();
        } else if term.t_store != nil {
            self.start();
            self.write("store");
            self.write(term.t_store!.type_.to_string());
            self.expression(term.t_store!.address);
            self.expression(term.t_store!.offset);
            self.expression(term.t_store!.value);
            self.end();
        } else if term.t_load != nil {
            self.start();
            self.write("load");
            self.write(term.t_load!.type_.to_string());
            self.expression(term.t_load!.address);
            self.expression(term.t_load!.offset);
            self.end();
        } else if term.t_sizeof != nil {
            self.start();
            self.write("sizeof");
            self.write(term.t_sizeof!.type_.to_string());
            self.end();
        } else if term.t_string != nil {
            self.write("(string {})".format(term.t_string!.to_string()));
        } else if term.t_data != nil {
            self.start();
            self.write("data");
            self.write(term.t_data!.data);
            self.write(term.t_data!.offset.to_string());
            self.end();
        } else if term.t_discard != nil {
            self.start();
            self.write("discard");
            self.expression(term.t_discard!);
            self.end();
        } else if term.t_inst != nil {
            self.start();
            self.write("inst");
            self.write(term.t_inst!);
            self.end();
        } else if term.t_bool != nil {
            self.write(term.t_bool!.to_string());
        } else if term.t_and != nil {
            self.start();
            self.write("and");
            self.expression(term.t_and!.lhs);
            self.expression(term.t_and!.rhs);
            self.end();
        } else if term.t_or != nil {
            self.start();
            self.write("or");
            self.expression(term.t_or!.lhs);
            self.expression(term.t_or!.rhs);
            self.end();
        } else if term.t_continue != nil {
            self.write("continue");
        } else if term.t_break != nil {
            self.write("break");
        } else if term.t_size != nil {
            self.start();
            self.write("size");
            self.write(term.t_size!.to_string());
            self.end();
        } else if term.t_u32 != nil {
            self.write(term.t_u32!.to_string());
        } else if term.t_comment != nil {
            self.start();
            self.write("comment");
            self.write(term.t_comment!);
            self.end();
        } else if term.t_type_rep != nil {
            self.start();
            self.write("type-rep");
            self.write(term.t_type_rep!.to_string());
            self.end();
        } else if term.t_import != nil {
            self.start();
            self.write("import");
            self.write(term.t_import!.namespace);
            self.write(term.t_import!.wrap_name);
            self.write(term.t_import!.import_name);

            self.start();
            self.write("func-type");
            for param in term.t_import!.func_type.params {
                self.write("(param {})".format(param));
            }
            self.write("(result {})".format(term.t_import!.func_type.result_type));
            self.end();

            self.end();
        } else if term.t_wasm_func != nil {
            self.start();
            self.write("wasm-func");
            self.write(term.t_wasm_func!.name);
            self.write(term.t_wasm_func!.wrapping_name);

            self.start();
            self.write("params");
            for param in term.t_wasm_func!.params {
                self.write("(param ${} {} {})".format(
                    param.name,
                    param.quartz_type.to_string(),
                    param.wasm_type,
                ));
            }
            self.write("(result ${} {})".format(
                term.t_wasm_func!.result_type.quartz_type.to_string(),
                term.t_wasm_func!.result_type.wasm_type,
            ));
            self.end();

            self.end();
        }
    }
}

