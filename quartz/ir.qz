type IrTerm = {
    ir_nil: bool?,
    ir_i32: string?,
    ir_ident: string?,
    ir_func: IrFunc?,
    ir_call: IrCall?,
    ir_let: IrLet?,
    ir_return: IrReturn?,
    ir_module: struct {
        elements: vec[IrTerm],
    }?,
};

module IrTerm {
    fun to_string(self): string {
        if self.ir_nil != nil {
            return "nil";
        }
        if self.ir_i32 != nil {
            return self.ir_i32!;
        }
        if self.ir_ident != nil {
            return self.ir_ident!;
        }
        if self.ir_func != nil {
            let result = "func ".concat(self.ir_func!.name).concat(" (");
            for i in 0..self.ir_func!.params.length {
                let p = self.ir_func!.params.at(i);
                result = result.concat(p.name).concat(": ").concat(p.type_.to_string());
                if i != self.ir_func!.params.length - 1 {
                    result = result.concat(", ");
                }
            }
            result = result.concat(") -> ").concat(self.ir_func!.result_type.to_string()).concat(" {");
            for i in 0..self.ir_func!.body.length {
                let p = self.ir_func!.body.at(i);
                result = result.concat(" ").concat(p.to_string());
            }
            result = result.concat(" }");

            return result;
        }
        if self.ir_call != nil {
            let result = "".concat(self.ir_call!.callee.to_string()).concat("(");
            for i in 0..self.ir_call!.args.length {
                let p = self.ir_call!.args.at(i);
                result = result.concat(p.to_string());
                if i != self.ir_call!.args.length - 1 {
                    result = result.concat(", ");
                }
            }
            result = result.concat(")");

            return result;
        }
        if self.ir_let != nil {
            return "let";
        }
        if self.ir_return != nil {
            let result = "return ".concat(self.ir_return!.value.to_string());

            return result;
        }
        if self.ir_module != nil {
            let result = "module";
            for i in 0..self.ir_module!.elements.length {
                let p = self.ir_module!.elements.at(i);
                result = result.concat(" ").concat(p.to_string());
            }

            return result;
        }
    }
}

type IrFunc = {
    name: string,
    params: vec[struct {
        name: string,
        type_: IrType,
    }],
    body: vec[IrTerm],
    result_type: IrType,
    locals: vec[string],
};

type IrCall = {
    callee: IrTerm,
    args: vec[IrTerm],
};

type IrLet = {
    name: string,
    type_: IrType,
    value: IrTerm,
};

type IrReturn = {
    value: IrTerm,
};

type IrType = {
    ir_i32: bool?,
};

module IrType {
    fun new(t: Type): IrType {
        if t.t_i32 != nil {
            return IrType{
                ir_i32: true?,
                ..nil,
            };
        }

        panic("unknown type");
    }

    fun to_string(self): string {
        if self.ir_i32 != nil {
            return "i32";
        }

        panic("unknown type");
    }
}
