import quartz::ast;
import quartz::path;

enum IrTerm {
    t_nil: bool,
    t_i32: i32,
    t_ident: string,
    t_func: IrFunc,
    t_call: IrCall,
    t_let: IrLet,
    t_return: IrReturn,
    t_module: struct {
        elements: vec[IrTerm],
    },
    t_global_let: struct {
        name: string,
        type_: IrType,
        value: IrTerm,
    },
    t_assign: struct {
        lhs: string,
        rhs: IrTerm,
    },
    t_if: struct {
        condition: IrTerm,
        then_term: IrTerm,
        else_term: IrTerm,
    },
    t_while: struct {
        condition: IrTerm,
        block: IrTerm,
        cleanup: IrTerm?,
    },
    t_seq: struct {
        terms: vec[IrTerm],
    },
    t_store: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
        value: IrTerm,
        raw_offset: i32,
    },
    t_load: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
        raw_offset: i32,
    },
    t_sizeof: struct {
        type_: IrType,
    },
    t_string: i32,
    t_data: struct {
        data: string,
        offset: i32,
    },
    t_discard: IrTerm,
    t_inst: string,
    t_bool: bool,
    t_and: struct {
        lhs: IrTerm,
        rhs: IrTerm,
    },
    t_or: struct {
        lhs: IrTerm,
        rhs: IrTerm,
    },
    t_continue: bool,
    t_break: bool,
    t_size: IrType,
    t_u32: u32,
    t_comment: string,
    t_type_rep: i32,
    t_import: struct {
        namespace: string,
        wrap_name: string,
        import_name: string,
        func_type: struct {
            params: vec[string],
            result_type: string,
        },
    },
    t_wasm_func: struct {
        name: string,
        wrapping_name: string,
        params: vec[struct {
            name: string,
            quartz_type: IrType,
            wasm_type: string,
        }],
        result_type: struct {
            quartz_type: IrType,
            wasm_type: string,
        },
    },
}

module IrTerm {
    fun to_string(self): string {
        return derive::to_string_pretty(self);
    }

    fun ident(name: string): IrTerm {
        return IrTerm {
            t_ident: name,
        };
    }

    fun i32(value: i32): IrTerm {
        return IrTerm {
            t_i32: value,
        };
    }

    fun find_locals(self): vec[struct {
        name: string,
        type_: IrType,
    }] {
        let locals = make[vec[struct {
            name: string,
            type_: IrType,
        }]]();

        if self.t_let != nil {
            locals.push(struct {
                name: self.t_let!.name,
                type_: self.t_let!.type_,
            });
            locals.extend(self.t_let!.value.find_locals());
        }
        if self.t_call != nil {
            locals.extend(self.t_call!.callee.find_locals());
            for arg in self.t_call!.args {
                locals.extend(arg.find_locals());
            }
        }
        if self.t_seq != nil {
            for term in self.t_seq!.terms {
                locals.extend(term.find_locals());
            }
        }
        if self.t_if != nil {
            locals.extend(self.t_if!.condition.find_locals());
            locals.extend(self.t_if!.then_term.find_locals());
            locals.extend(self.t_if!.else_term.find_locals());
        }
        if self.t_while != nil {
            locals.extend(self.t_while!.condition.find_locals());
            locals.extend(self.t_while!.block.find_locals());
            if self.t_while!.cleanup != nil {
                locals.extend(self.t_while!.cleanup!.find_locals());
            }
        }
        if self.t_store != nil {
            locals.extend(self.t_store!.address.find_locals());
            locals.extend(self.t_store!.offset.find_locals());
            locals.extend(self.t_store!.value.find_locals());
        }
        if self.t_load != nil {
            locals.extend(self.t_load!.address.find_locals());
            locals.extend(self.t_load!.offset.find_locals());
        }
        if self.t_assign != nil {
            locals.extend(self.t_assign!.rhs.find_locals());
        }
        if self.t_return != nil {
            locals.extend(self.t_return!.value.find_locals());
        }
        if self.t_assign != nil {
            locals.extend(self.t_assign!.rhs.find_locals());
        }
        if self.t_discard != nil {
            locals.extend(self.t_discard!.find_locals());
        }
        if self.t_and != nil {
            locals.extend(self.t_and!.lhs.find_locals());
            locals.extend(self.t_and!.rhs.find_locals());
        }
        if self.t_or != nil {
            locals.extend(self.t_or!.lhs.find_locals());
            locals.extend(self.t_or!.rhs.find_locals());
        }

        return locals;
    }
}

struct IrFunc {
    name: string,
    params: vec[struct {
        name: string,
        type_: IrType,
    }],
    result_type: IrType,
    body: vec[IrTerm],
    ffi_export: string?,
}

struct IrCall {
    callee: IrTerm,
    args: vec[IrTerm],
}

struct IrLet {
    name: string,
    type_: IrType,
    value: IrTerm,
}

struct IrReturn {
    value: IrTerm,
}

enum IrType {
    t_nil: bool,
    t_i32: bool,
    t_address: bool,
    t_byte: bool,
    t_bool: bool,
    t_any: bool,
    t_i64: bool,
    t_externref: bool,
}

module IrType {
    fun new(t: Type): IrType {
        if t.t_nil != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_i32 != nil {
            return IrType {
                t_i32: true,
            };
        }
        if t.t_ident != nil {
            if t.t_ident!.equal("i64") {
                return IrType {
                    t_i64: true,
                };
            }
            if t.t_ident! == "externref" {
                return IrType {
                    t_externref: true,
                };
            }

            return IrType {
                t_address: true,
            };
        }
        if t.t_byte != nil {
            return IrType {
                t_byte: true,
            };
        }
        if t.t_ptr != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_optional != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_bool != nil {
            return IrType {
                t_bool: true,
            };
        }
        if t.t_vec != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_or != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_any != nil {
            return IrType {
                t_any: true,
            };
        }
        if t.t_u32 != nil {
            return IrType {
                t_i32: true,
            };
        }
        if t.t_struct != nil {
            return IrType {
                t_address: true,
            };
        }
        if t.t_map != nil {
            return IrType {
                t_address: true,
            };
        }

        return panic("unknown type: {} (IrType::new)", t.to_string());
    }

    fun to_string(self): string {
        return derive::to_string(self);
    }

    fun is_nil(self): bool {
        return self.t_nil != nil;
    }

    fun sizeof(self): i32 {
        if self.t_byte != nil {
            return 1;
        } else {
            return 8;
        }
    }
}

