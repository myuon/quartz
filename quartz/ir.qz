import quartz::ast;

type IrTerm = {
    t_nil: bool?,
    t_i32: string?,
    t_ident: string?,
    t_func: IrFunc?,
    t_call: IrCall?,
    t_let: IrLet?,
    t_return: IrReturn?,
    t_module: struct {
        elements: vec[IrTerm],
    }?,
    t_global_let: struct {
        name: string,
        type_: IrType,
        value: IrTerm,
    }?,
    t_assign: struct {
        lhs: string,
        rhs: IrTerm,
    }?,
    t_if: struct {
        condition: IrTerm,
        then_term: IrTerm,
        else_term: IrTerm,
    }?,
    t_while: struct {
        condition: IrTerm,
        block: IrTerm,
        cleanup: IrTerm?,
    }?,
    t_seq: struct {
        terms: vec[IrTerm],
    }?,
    t_store: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
        value: IrTerm,
    }?,
    t_load: struct {
        type_: IrType,
        address: IrTerm,
        offset: IrTerm,
    }?,
};

module IrTerm {
    fun to_string(self): string {
        return derive::to_string_pretty(self);
    }

    fun ident(name: string): IrTerm {
        return IrTerm{
            t_ident: name?,
            ..nil,
        };
    }

    fun i32(value: i32): IrTerm {
        return IrTerm{
            t_i32: value.to_string()?,
            ..nil,
        };
    }
}

type IrFunc = {
    name: string,
    params: vec[struct {
        name: string,
        type_: IrType,
    }],
    body: vec[IrTerm],
    result_type: IrType,
    locals: vec[string],
};

type IrCall = {
    callee: IrTerm,
    args: vec[IrTerm],
};

type IrLet = {
    name: string,
    type_: IrType,
    value: IrTerm,
};

type IrReturn = {
    value: IrTerm,
};

type IrType = {
    t_nil: bool?,
    t_i32: bool?,
    t_address: bool?,
};

module IrType {
    fun new(t: Type): IrType {
        if t.t_nil != nil {
            return IrType{
                t_nil: true?,
                ..nil,
            };
        }
        if t.t_i32 != nil {
            return IrType{
                t_i32: true?,
                ..nil,
            };
        }

        panic("unknown type: {}", t.to_string());
    }

    fun to_string(self): string {
        if self.t_nil != nil {
            return "nil";
        }
        if self.t_i32 != nil {
            return "i32";
        }

        panic("unknown type");
    }

    fun is_nil(self): bool {
        return self.t_nil != nil;
    }

    fun sizeof(self): i32 {
        if self.t_nil != nil {
            return 4;
        }
        if self.t_i32 != nil {
            return 4;
        }
        if self.t_address != nil {
            return 4;
        }

        panic("unknown type");
    }
}
