enum Json {
    t_nil: nil,
    t_bool: bool,
    t_i32: i32,
    t_string: string,
    t_array: vec[Json],
    t_object: map[string, Json],
}

module Json {
    fun to_string_internal(self): string {
        if self.t_nil != nil {
            return "null";
        } else if self.t_bool != nil {
            if self.t_bool! {
                return "true";
            } else {
                return "false";
            }
        } else if self.t_i32 != nil {
            return self.t_i32!.to_string();
        } else if self.t_string != nil {
            return self.t_string!.escape();
        } else if self.t_array != nil {
            let builder = stringbuilder::new();
            builder.append("[");

            for i in 0..self.t_array!.length {
                let j = self.t_array!.at(i);
                builder.append(j.to_string_internal());

                if i < self.t_array!.length - 1 {
                    builder.append(",");
                }
            }

            builder.append("]");

            return builder.to_string();
        } else if self.t_object != nil {
            let builder = stringbuilder::new();
            builder.append("{");

            let keys = self.t_object!.list_keys();
            for i in 0..keys.length {
                let k = keys.at(i);
                let v = self.t_object!.at(k);
                builder.append(k.escape());
                builder.append(":");
                builder.append(v.to_string_internal());

                if i < keys.length - 1 {
                    builder.append(",");
                }
            }

            builder.append("}");

            return builder.to_string();
        }

        return "";
    }

    fun to_string(self): string {
        return self.to_string_internal();
    }

    fun from_string(str: string): Json or error {
        return JsonParser::parse(str);
    }
}

enum JsonToken {
    t_null: bool,
    t_lbracket: bool,
    t_rbracket: bool,
    t_lbrace: bool,
    t_rbrace: bool,
    t_comma: bool,
    t_colon: bool,
    t_i32: i32,
    t_string: string,
    t_bool: bool,
}

struct JsonTokenizer {
    str: string,
    position: i32,
}

module JsonTokenizer {
    fun new(str: string): JsonTokenizer {
        return JsonTokenizer {
            str: str,
            position: 0,
        };
    }

    fun tokenize(self): vec[JsonToken] or error {
        let tokens = make[vec[JsonToken]]();

        while self.position < self.str.length {
            let c = self.peek().try;

            if c == " " || c == "\n" || c == "\t" {
                self.position = self.position + 1;
                continue;
            } else if c == "{" {
                tokens.push(JsonToken {
                    t_lbrace: true,
                });
                self.position = self.position + 1;
            } else if c == "}" {
                tokens.push(JsonToken {
                    t_rbrace: true,
                });
                self.position = self.position + 1;
            } else if c == "[" {
                tokens.push(JsonToken {
                    t_lbracket: true,
                });
                self.position = self.position + 1;
            } else if c == "]" {
                tokens.push(JsonToken {
                    t_rbracket: true,
                });
                self.position = self.position + 1;
            } else if c == "," {
                tokens.push(JsonToken {
                    t_comma: true,
                });
                self.position = self.position + 1;
            } else if c == ":" {
                tokens.push(JsonToken {
                    t_colon: true,
                });
                self.position = self.position + 1;
            } else if c == "\"" {
                let builder = stringbuilder::new();
                self.position = self.position + 1;

                let c = self.peek().try;
                while c != "\"" {
                    if c == "\\" {
                        let next = self.peek().try;
                        if next == "\"" {
                            builder.append("\"");
                            self.position = self.position + 1;
                            continue;
                        }
                    }

                    builder.append(c);
                    self.position = self.position + 1;

                    c = self.peek().try;
                }

                self.position = self.position + 1;

                tokens.push(JsonToken {
                    t_string: builder.to_string(),
                });
            } else if c == "n" {
                let n = self.peek_n(4).try;
                if n != "null" {
                    return _ or error::new("expected null");
                }

                self.position = self.position + 4;
                tokens.push(JsonToken {
                    t_null: true,
                });
            } else if c == "t" {
                let n = self.peek_n(4).try;
                if n != "true" {
                    return _ or error::new("expected true");
                }

                self.position = self.position + 4;
                tokens.push(JsonToken {
                    t_bool: true,
                });
            } else if c == "f" {
                let n = self.peek_n(5).try;
                if n != "false" {
                    return _ or error::new("expected false");
                }

                self.position = self.position + 5;
                tokens.push(JsonToken {
                    t_bool: false,
                });
            } else {
                let builder = stringbuilder::new();
                let c = self.peek().try;
                let b = c.(0) as i32;
                if b < 48 || b > 57 {
                    return _ or error::new("expected number, got '{}'".format(c));
                }

                while b >= 48 && b <= 57 && self.position < self.str.length {
                    self.position = self.position + 1;
                    builder.append(c);

                    c = self.peek().try;
                    b = c.(0) as i32;
                }

                tokens.push(JsonToken {
                    t_i32: i32::parse(builder.to_string()),
                });
            }
        }

        return tokens;
    }

    fun peek(self): string or error {
        if self.position > self.str.length {
            return _ or error::new("unexpected end of input, {}".format(self.position.to_string()));
        }

        return self.str.slice(self.position, self.position + 1);
    }

    fun peek_n(self, length: i32): string or error {
        if self.position + length > self.str.length {
            return _ or error::new("unexpected end of input");
        }

        return self.str.slice(self.position, self.position + length);
    }
}

struct JsonParser {
    tokens: vec[JsonToken],
    position: i32,
}

module JsonParser {
    fun new(tokens: vec[JsonToken]): JsonParser {
        return JsonParser {
            tokens: tokens,
            position: 0,
        };
    }

    fun parse(str: string): Json or error {
        let tokenizer = JsonTokenizer::new(str);
        let tokens = tokenizer.tokenize().try;
        let parser = JsonParser::new(tokens);
        return parser.json();
    }

    fun peek(self): JsonToken or error {
        if self.position > self.tokens.length {
            return _ or error::new("unexpected end of input");
        }

        return self.tokens.at(self.position);
    }

    fun json(self): Json or error {
        let token = self.peek().try;
        if token.t_null != nil {
            self.position = self.position + 1;

            return Json {
                t_nil: nil,
            };
        } else if token.t_bool != nil {
            self.position = self.position + 1;

            return Json {
                t_bool: token.t_bool!,
            };
        } else if token.t_i32 != nil {
            self.position = self.position + 1;

            return Json {
                t_i32: token.t_i32!,
            };
        } else if token.t_string != nil {
            self.position = self.position + 1;

            return Json {
                t_string: token.t_string!,
            };
        } else if token.t_lbracket != nil {
            return self.parse_array();
        } else if token.t_lbrace != nil {
            return self.parse_object();
        }

        return _ or error::new("unexpected token");
    }

    fun parse_object(self): Json or error {
        let obj = make[map[string, Json]]();
        self.position = self.position + 1;

        while true {
            let c = self.peek().try;
            if c.t_rbrace != nil {
                self.position = self.position + 1;
                break;
            } else if c.t_comma != nil {
                self.position = self.position + 1;
                continue;
            }

            let key = self.peek().try;
            if key.t_string == nil {
                return _ or error::new("expected string");
            }
            self.position = self.position + 1;

            let c = self.peek().try;
            if c.t_colon == nil {
                return _ or error::new("expected ':', got '{}'".format(derive::to_string(c)));
            }
            self.position = self.position + 1;

            let value = self.json().try;
            obj.insert(key.t_string!, value);
        }

        return Json {
            t_object: obj,
        };
    }

    fun parse_array(self): Json or error {
        let arr = make[vec[Json]]();
        self.position = self.position + 1;

        while true {
            let c = self.peek().try;
            if c.t_rbracket != nil {
                self.position = self.position + 1;
                break;
            } else if c.t_comma != nil {
                self.position = self.position + 1;
                continue;
            }

            let value = self.json().try;
            arr.push(value);
        }

        return Json {
            t_array: arr,
        };
    }
}

@[test]
fun test_json_from_string() {
    assert_eq(
        Json::from_string("null"),
        Json {
            t_nil: nil,
        } or _,
    );
    assert_eq(
        Json::from_string("true"),
        Json {
            t_bool: true,
        } or _,
    );
    assert_eq(
        Json::from_string("123"),
        Json {
            t_i32: 123,
        } or _,
    );
    assert_eq(
        Json::from_string("\"hello\""),
        Json {
            t_string: "hello",
        } or _,
    );
    assert_eq(
        Json::from_string("[1,\"hello\",null]"),
        Json {
            t_array: make[vec[Json]](
                Json {
                    t_i32: 1,
                },
                Json {
                    t_string: "hello",
                },
                Json {
                    t_nil: nil,
                },
            ),
        } or _,
    );

    let object = make[map[string, Json]]();
    object.("hello") = Json {
        t_i32: 123,
    };

    assert_eq(
        Json::from_string("{\"hello\":123}"),
        Json {
            t_object: object,
        } or _,
    );
}

