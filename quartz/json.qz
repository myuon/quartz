enum Json {
    t_nil: nil,
    t_i32: i32,
    t_string: string,
    t_array: vec[Json],
    t_object: map[string, Json],
}

module Json {
    fun to_string_internal(self): string {
        if self.t_nil != nil {
            return "null";
        } else if self.t_i32 != nil {
            return self.t_i32!.to_string();
        } else if self.t_string != nil {
            return self.t_string!.escape();
        } else if self.t_array != nil {
            let builder = stringbuilder::new();
            builder.append("[");

            for i in 0..self.t_array!.length {
                let j = self.t_array!.at(i);
                builder.append(j.to_string_internal());

                if i < self.t_array!.length - 1 {
                    builder.append(",");
                }
            }

            builder.append("]");

            return builder.to_string();
        } else if self.t_object != nil {
            let builder = stringbuilder::new();
            builder.append("{");

            let keys = self.t_object!.list_keys();
            for i in 0..keys.length {
                let k = keys.at(i);
                let v = self.t_object!.at(k);
                builder.append(k.escape());
                builder.append(":");
                builder.append(v.to_string_internal());

                if i < keys.length - 1 {
                    builder.append(",");
                }
            }

            builder.append("}");

            return builder.to_string();
        }

        return "";
    }

    fun to_string(self): string {
        return self.to_string_internal();
    }
}

