import quartz::ast;
import quartz::path;
import quartz::location;

struct Ident {
    data: string,
    location: Location,
}

struct Module {
    decls: vec[LDecl],
}

module Module {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

enum Decl {
    t_func: Function,
    t_let: Let,
    t_type: struct {
        name: string,
        type_: Type,
    },
    t_enum: struct {
        name: string,
        type_: Type,
    },
    t_module: struct {
        path: Path,
        extends: string?,
        module_: Module,
    },
    t_import: Path,
    t_attributes: LAttributes,
    t_skip: bool,
    t_declare_func: DeclareFunc,
    t_interface: Interface,
}

module Decl {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct Interface {
    name: string,
    methods: vec[struct {
        name: string,
        params: vec[struct {
            name: string,
            type_: Type,
        }],
        result_type: Type,
    }],
}

struct DeclareFunc {
    name: Ident,
    result_type: Type,
    params: vec[struct {
        name: string,
        type_: Type,
    }],
    declare_namespace: string?,
    declare_wrap: struct {
        params: vec[Type],
        result_type: Type,
    }?,
}

module DeclareFunc {
    fun to_type(self): Type {
        let params_type = make[vec[Type]]();
        for i in 0..self.params.length {
            let p = self.params.at(i);
            params_type.push(p.type_);
        }

        return Type {
            t_func: struct {
                params: params_type,
                result: self.result_type,
            },
        };
    }
}

struct LDecl {
    data: Decl,
    location: Location,
}

struct Let {
    name: string,
    name_type: Type,
    expr: LExpression,
}

module Let {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct Function {
    name: Ident,
    result_type: Type,
    body: LBlock,
    params: vec[struct {
        name: string,
        type_: Type,
    }],
    variadic: struct {
        name: string,
        type_: Type,
    }?,
    no_allocation: bool,
    is_test: bool,
    ffi_export: string?,
}

module Function {
    fun to_string(self): string {
        return derive::to_string(self);
    }

    fun to_type(self): Type {
        let params_type = make[vec[Type]]();
        for i in 0..self.params.length {
            let p = self.params.at(i);
            params_type.push(p.type_);
        }

        if self.variadic != nil {
            return Type {
                t_variadic_func: struct {
                    params: params_type,
                    result: self.result_type,
                    variadic: self.variadic!.type_,
                },
            };
        } else {
            return Type {
                t_func: struct {
                    params: params_type,
                    result: self.result_type,
                },
            };
        }
    }
}

struct Block {
    block: vec[LStatement],
}

module Block {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct LBlock {
    data: Block,
    location: Location,
}

enum Statement {
    t_let: struct {
        pattern: LPattern,
        name_type: Type,
        expr: LExpression,
    },
    t_return: struct {
        expr: LExpression,
    },
    t_assign: struct {
        lhs: LExpression,
        rhs_type: Type?,
        rhs: LExpression,
    },
    t_expr: struct {
        expr: LExpression,
    },
    t_if: struct {
        condition: LExpression,
        then_block: LBlock,
        else_block: LBlock?,
    },
    t_while: struct {
        condition: LExpression,
        block: LBlock,
    },
    t_for: struct {
        mode: string,
        type_: Type?,
        ident: string,
        range: LExpression,
        block: LBlock,
    },
    t_continue: bool,
    t_break: bool,
    t_attribute: LAttribute,
}

module Statement {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct LStatement {
    data: Statement,
    location: Location,
}

enum Expression {
    t_ident: struct {
        name: string,
        resolved_path: Path?,
    },
    t_binop: struct {
        binop: string,
        type_: Type?,
        left: LExpression,
        right: LExpression,
    },
    t_i32: struct {
        value: i32,
    },
    t_u32: struct {
        value: u32,
    },
    t_call: struct {
        callee: LExpression,
        args: vec[LExpression],
        variadic: struct {
            element_type: Type,
            index: i32,
        }?,
        expansion: LExpression?,
    },
    t_project: struct {
        expr: LExpression,
        field: Ident,
        type_: Type?,
        resolved_path: Path?,
    },
    t_record: RecordExpression,
    t_anonymous_record: struct {
        fields: vec[struct {
            data: struct {
                field: string,
                value: LExpression,
            },
            location: Location,
        }],
        type_: Type?,
    },
    t_make: struct {
        type_: Type,
        args: vec[LExpression],
    },
    t_as: struct {
        expr: LExpression,
        source_type: Type,
        target_type: Type,
    },
    t_path: struct {
        path: Path,
        resolved_path: Path?,
    },
    t_self: bool,
    t_string: struct {
        value: string,
        raw: string,
    },
    t_paren: LExpression,
    t_range: struct {
        start: LExpression,
        end: LExpression,
    },
    t_unop: struct {
        unop: string,
        expr: LExpression,
    },
    t_unwrap: struct {
        type_: Type,
        expr: LExpression,
    },
    t_wrap: struct {
        type_: Type,
        expr: LExpression,
    },
    t_bool: bool,
    t_nil: bool, // if nil is explicit
    t_omit: bool,
    t_enumor: struct {
        lhs: LExpression?,
        rhs: LExpression?,
        lhs_type: Type,
        rhs_type: Type,
    },
    t_sizeof: struct {
        type_: Type,
    },
    t_try: LExpression,
    t_upcast: struct {
        interface_name: string,
        expr: LExpression,
    },
}

module Expression {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct LExpression {
    data: Expression,
    location: Location,
}

struct RecordExpression {
    name: string,
    fields: vec[struct {
        field: string,
        value: LExpression,
    }],
    expansion: LExpression?,
}

module RecordExpression {
    fun to_string(self): string {
        return derive::to_string(self);
    }

    fun at(self, field: string): Expression or error {
        for i in 0..self.fields.length {
            let f = self.fields.at(i);
            if f.field == field {
                return f.value.data;
            }
        }

        return _ or error::new("Field not found");
    }

    fun to_fields_map(self): map[string, LExpression] {
        let result = make[map[string, LExpression]]();
        for i in 0..self.fields.length {
            let f = self.fields.at(i);
            result.insert(f.field, f.value);
        }

        return result;
    }
}

enum Type {
    t_omit: bool, // for unification
    t_nil: bool,
    t_i32: bool,
    t_u32: bool,
    t_func: struct {
        params: vec[Type],
        result: Type,
    },
    t_variadic_func: struct {
        params: vec[Type],
        result: Type,
        variadic: Type,
    },
    t_ptr: Type,
    t_bool: bool,
    t_struct: TypeStruct,
    t_byte: bool,
    t_ident: string,
    t_range: Type,
    t_optional: Type,
    t_vec: Type,
    t_or: struct {
        left: Type,
        right: Type,
    },
    t_any: bool,
    t_map: struct {
        key: Type,
        value: Type,
    },
    t_enum: TypeStruct,
}

module Type {
    fun to_string(self): string {
        if self.t_omit != nil {
            return "_";
        } else if self.t_nil != nil {
            return "nil";
        } else if self.t_i32 != nil {
            return "i32";
        } else if self.t_u32 != nil {
            return "u32";
        } else if self.t_bool != nil {
            return "bool";
        } else if self.t_byte != nil {
            return "byte";
        } else if self.t_any != nil {
            return "any";
        } else if self.t_ident != nil {
            return self.t_ident!;
        } else if self.t_range != nil {
            return "range[{}]".format(self.t_range!.to_string());
        } else if self.t_optional != nil {
            return "{}?".format(self.t_optional!.to_string());
        } else if self.t_vec != nil {
            return "vec[{}]".format(self.t_vec!.to_string());
        } else if self.t_or != nil {
            return "{} or {}".format(self.t_or!.left.to_string(), self.t_or!.right.to_string());
        } else if self.t_map != nil {
            return "map[{}, {}]".format(self.t_map!.key.to_string(), self.t_map!.value.to_string());
        } else if self.t_struct != nil {
            let builder = stringbuilder::new();
            builder.append("struct {");
            for i in 0..self.t_struct!.fields.length {
                let field = self.t_struct!.fields.at(i);
                builder.append(format("{}: {}", field.data.name, field.data.type_.to_string()));

                if i != self.t_struct!.fields.length - 1 {
                    builder.append(", ");
                }
            }
            builder.append("}");

            return builder.to_string();
        } else if self.t_enum != nil {
            let builder = stringbuilder::new();
            builder.append("enum {");
            for i in 0..self.t_enum!.fields.length {
                let field = self.t_enum!.fields.at(i);
                builder.append(field.data.name);

                if i != self.t_enum!.fields.length - 1 {
                    builder.append(", ");
                }
            }
            builder.append("}");

            return builder.to_string();
        } else if self.t_func != nil {
            let builder = stringbuilder::new();
            builder.append("fun (");
            for i in 0..self.t_func!.params.length {
                let param = self.t_func!.params.at(i);
                builder.append(param.to_string());

                if i != self.t_func!.params.length - 1 {
                    builder.append(", ");
                }
            }
            builder.append(format(") -> {}", self.t_func!.result.to_string()));

            return builder.to_string();
        } else if self.t_variadic_func != nil {
            let builder = stringbuilder::new();
            builder.append("fun (");
            for i in 0..self.t_variadic_func!.params.length {
                let param = self.t_variadic_func!.params.at(i);
                builder.append(param.to_string());

                if i != self.t_variadic_func!.params.length - 1 {
                    builder.append(", ");
                }
            }
            builder.append(format(
                ", ..{}) -> {}",
                self.t_variadic_func!.variadic.to_string(),
                self.t_variadic_func!.result.to_string(),
            ));

            return builder.to_string();
        } else if self.t_ptr != nil {
            return "ptr[{}]".format(self.t_ptr!.to_string());
        }

        panic("Unknown type: {}", derive::to_string(self));
        return "";
    }

    fun string(): Type {
        return Type {
            t_ident: "string",
        };
    }

    fun is_integer_type(self): bool {
        return self.t_i32 != nil || self.t_u32 != nil || (self.t_ident != nil && self.t_ident!.equal("i64"));
    }
}

struct TypeStruct {
    fields: vec[struct {
        data: struct {
            name: string,
            type_: Type,
        },
        location: Location,
    }],
}

module TypeStruct {
    fun has(self, name: string): bool {
        for i in 0..self.fields.length {
            if self.fields.at(i).data.name.equal(name) {
                return true;
            }
        }
        return false;
    }

    fun at(self, name: string): Type {
        for i in 0..self.fields.length {
            if self.fields.at(i).data.name.equal(name) {
                return self.fields.at(i).data.type_;
            }
        }

        return panic("unimplemented: typestruct.at");
    }

    fun index(self, name: string): i32 {
        for i in 0..self.fields.length {
            if self.fields.at(i).data.name.equal(name) {
                return i;
            }
        }

        return panic("unimplemented: typestruct.index, {}, {}".format(derive::to_string(self), name));
    }
}

struct LType {
    data: Type,
    location: Location,
}

struct Pattern {
    t_ident: string?,
    t_or: struct {
        lhs: LPattern,
        rhs: LPattern,
    }?,
    t_omit: bool?,
}

module Pattern {
    fun to_string(self): string {
        return derive::to_string(self);
    }
}

struct LPattern {
    data: Pattern,
    location: Location,
}

struct Attribute {
    name: Ident,
    args: vec[LExpression],
}

struct LAttribute {
    data: Attribute,
    location: Location,
}

struct LAttributes {
    data: vec[Attribute],
    location: Location,
}

